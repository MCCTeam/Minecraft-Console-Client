//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MinecraftClient {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ConfigComments {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ConfigComments() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MinecraftClient.Resources.ConfigComments.ConfigComments", typeof(ConfigComments).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to can be used in some other fields as %yourvar%
        ///%username% and %serverip% are reserved variables..
        /// </summary>
        internal static string AppVars_Variables {
            get {
                return ResourceManager.GetString("AppVars.Variables", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to =============================== #
        /// Minecraft Console Client Bots  #
        ///=============================== #.
        /// </summary>
        internal static string ChatBot {
            get {
                return ResourceManager.GetString("ChatBot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Get alerted when specified words are detected in chat
        ///Useful for moderating your server or detecting when someone is talking to you.
        /// </summary>
        internal static string ChatBot_Alerts {
            get {
                return ResourceManager.GetString("ChatBot.Alerts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Play a beep sound when a word is detected in addition to highlighting..
        /// </summary>
        internal static string ChatBot_Alerts_Beep_Enabled {
            get {
                return ResourceManager.GetString("ChatBot.Alerts.Beep_Enabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List of words/strings to NOT alert you on..
        /// </summary>
        internal static string ChatBot_Alerts_Excludes {
            get {
                return ResourceManager.GetString("ChatBot.Alerts.Excludes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of a file where alers logs will be written..
        /// </summary>
        internal static string ChatBot_Alerts_Log_File {
            get {
                return ResourceManager.GetString("ChatBot.Alerts.Log_File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log alerts info a file..
        /// </summary>
        internal static string ChatBot_Alerts_Log_To_File {
            get {
                return ResourceManager.GetString("ChatBot.Alerts.Log_To_File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List of words/strings to alert you on..
        /// </summary>
        internal static string ChatBot_Alerts_Matches {
            get {
                return ResourceManager.GetString("ChatBot.Alerts.Matches", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trigger alerts when it rains and when it stops..
        /// </summary>
        internal static string ChatBot_Alerts_Trigger_By_Rain {
            get {
                return ResourceManager.GetString("ChatBot.Alerts.Trigger_By_Rain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Triggers alerts at the beginning and end of thunderstorms..
        /// </summary>
        internal static string ChatBot_Alerts_Trigger_By_Thunderstorm {
            get {
                return ResourceManager.GetString("ChatBot.Alerts.Trigger_By_Thunderstorm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Triggers an alert after receiving a specified keyword..
        /// </summary>
        internal static string ChatBot_Alerts_Trigger_By_Words {
            get {
                return ResourceManager.GetString("ChatBot.Alerts.Trigger_By_Words", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Send a command on a regular or random basis or make the bot walk around randomly to avoid automatic AFK disconnection
        ////!\ Make sure your server rules do not forbid anti-AFK mechanisms!
        ////!\ Make sure you keep the bot in an enclosure to prevent it wandering off if you&apos;re using terrain handling! (Recommended size 5x5x5).
        /// </summary>
        internal static string ChatBot_AntiAfk {
            get {
                return ResourceManager.GetString("ChatBot.AntiAfk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command to send to the server..
        /// </summary>
        internal static string ChatBot_AntiAfk_Command {
            get {
                return ResourceManager.GetString("ChatBot.AntiAfk.Command", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The time interval for execution. (in seconds).
        /// </summary>
        internal static string ChatBot_AntiAfk_Delay {
            get {
                return ResourceManager.GetString("ChatBot.AntiAfk.Delay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to sneak when sending the command..
        /// </summary>
        internal static string ChatBot_AntiAfk_Use_Sneak {
            get {
                return ResourceManager.GetString("ChatBot.AntiAfk.Use_Sneak", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use terrain handling to enable the bot to move around..
        /// </summary>
        internal static string ChatBot_AntiAfk_Use_Terrain_Handling {
            get {
                return ResourceManager.GetString("ChatBot.AntiAfk.Use_Terrain_Handling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The range the bot can move around randomly (Note: the bigger the range, the slower the bot will be).
        /// </summary>
        internal static string ChatBot_AntiAfk_Walk_Range {
            get {
                return ResourceManager.GetString("ChatBot.AntiAfk.Walk_Range", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How many times can the bot fail trying to move before using the command method..
        /// </summary>
        internal static string ChatBot_AntiAfk_Walk_Retries {
            get {
                return ResourceManager.GetString("ChatBot.AntiAfk.Walk_Retries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically attack hostile mobs around you
        ///You need to enable Entity Handling to use this bot
        ////!\ Make sure server rules allow your planned use of AutoAttack
        ////!\ SERVER PLUGINS may consider AutoAttack to be a CHEAT MOD and TAKE ACTION AGAINST YOUR ACCOUNT so DOUBLE CHECK WITH SERVER RULES!.
        /// </summary>
        internal static string ChatBot_AutoAttack {
            get {
                return ResourceManager.GetString("ChatBot.AutoAttack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allow attacking hostile mobs..
        /// </summary>
        internal static string ChatBot_AutoAttack_Attack_Hostile {
            get {
                return ResourceManager.GetString("ChatBot.AutoAttack.Attack_Hostile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allow attacking passive mobs..
        /// </summary>
        internal static string ChatBot_AutoAttack_Attack_Passive {
            get {
                return ResourceManager.GetString("ChatBot.AutoAttack.Attack_Passive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Capped between 1 to 4.
        /// </summary>
        internal static string ChatBot_AutoAttack_Attack_Range {
            get {
                return ResourceManager.GetString("ChatBot.AutoAttack.Attack_Range", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How long to wait between each attack. Set &quot;Custom = false&quot; to let MCC calculate it..
        /// </summary>
        internal static string ChatBot_AutoAttack_Cooldown_Time {
            get {
                return ResourceManager.GetString("ChatBot.AutoAttack.Cooldown_Time", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All entity types can be found here: https://mccteam.github.io/r/entity/#L15.
        /// </summary>
        internal static string ChatBot_AutoAttack_Entites_List {
            get {
                return ResourceManager.GetString("ChatBot.AutoAttack.Entites_List", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Possible values: &quot;Interact&quot;, &quot;Attack&quot; (default), &quot;InteractAt&quot; (Interact and Attack)..
        /// </summary>
        internal static string ChatBot_AutoAttack_Interaction {
            get {
                return ResourceManager.GetString("ChatBot.AutoAttack.Interaction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wether to treat the entities list as a &quot;whitelist&quot; or as a &quot;blacklist&quot;..
        /// </summary>
        internal static string ChatBot_AutoAttack_List_Mode {
            get {
                return ResourceManager.GetString("ChatBot.AutoAttack.List_Mode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;single&quot; or &quot;multi&quot;. single target one mob per attack. multi target all mobs in range per attack.
        /// </summary>
        internal static string ChatBot_AutoAttack_Mode {
            get {
                return ResourceManager.GetString("ChatBot.AutoAttack.Mode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;health&quot; or &quot;distance&quot;. Only needed when using single mode.
        /// </summary>
        internal static string ChatBot_AutoAttack_Priority {
            get {
                return ResourceManager.GetString("ChatBot.AutoAttack.Priority", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically craft items in your inventory
        ///See https://mccteam.github.io/g/bots/#auto-craft for how to use
        ///You need to enable Inventory Handling to use this bot
        ///You should also enable Terrain and Movements if you need to use a crafting table.
        /// </summary>
        internal static string ChatBot_AutoCraft {
            get {
                return ResourceManager.GetString("ChatBot.AutoCraft", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Location of the crafting table if you intended to use it. Terrain and movements must be enabled..
        /// </summary>
        internal static string ChatBot_AutoCraft_CraftingTable {
            get {
                return ResourceManager.GetString("ChatBot.AutoCraft.CraftingTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to What to do on crafting failure, &quot;abort&quot; or &quot;wait&quot;..
        /// </summary>
        internal static string ChatBot_AutoCraft_OnFailure {
            get {
                return ResourceManager.GetString("ChatBot.AutoCraft.OnFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recipes.Name: The name can be whatever you like and it is used to represent the recipe.
        ///Recipes.Type: crafting table type: &quot;player&quot; or &quot;table&quot;
        ///Recipes.Result: the resulting item
        ///Recipes.Slots: All slots, counting from left to right, top to bottom. Please fill in &quot;Null&quot; for empty slots.
        ///For the naming of the items, please see: https://mccteam.github.io/r/item/#L12.
        /// </summary>
        internal static string ChatBot_AutoCraft_Recipes {
            get {
                return ResourceManager.GetString("ChatBot.AutoCraft.Recipes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto-digging blocks.
        ///You need to enable Terrain Handling to use this bot
        ///You can use &quot;/digbot start&quot; and &quot;/digbot stop&quot; to control the start and stop of AutoDig.
        ///Since MCC does not yet support accurate calculation of the collision volume of blocks, all blocks are considered as complete cubes when obtaining the position of the lookahead.
        ///For the naming of the block, please see https://mccteam.github.io/r/block/#L15.
        /// </summary>
        internal static string ChatBot_AutoDig {
            get {
                return ResourceManager.GetString("ChatBot.AutoDig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How many seconds to wait after entering the game to start digging automatically, set to -1 to disable automatic start..
        /// </summary>
        internal static string ChatBot_AutoDig_Auto_Start_Delay {
            get {
                return ResourceManager.GetString("ChatBot.AutoDig.Auto_Start_Delay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically switch to the appropriate tool..
        /// </summary>
        internal static string ChatBot_AutoDig_Auto_Tool_Switch {
            get {
                return ResourceManager.GetString("ChatBot.AutoDig.Auto_Tool_Switch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mining a block for more than &quot;Dig_Timeout&quot; seconds will be considered a timeout..
        /// </summary>
        internal static string ChatBot_AutoDig_Dig_Timeout {
            get {
                return ResourceManager.GetString("ChatBot.AutoDig.Dig_Timeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to drop the current tool when its durability is too low..
        /// </summary>
        internal static string ChatBot_AutoDig_Drop_Low_Durability_Tools {
            get {
                return ResourceManager.GetString("ChatBot.AutoDig.Drop_Low_Durability_Tools", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Will not use tools with less durability than this. Set to zero to disable this feature..
        /// </summary>
        internal static string ChatBot_AutoDig_Durability_Limit {
            get {
                return ResourceManager.GetString("ChatBot.AutoDig.Durability_Limit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wether to treat the blocks list as a &quot;whitelist&quot; or as a &quot;blacklist&quot;..
        /// </summary>
        internal static string ChatBot_AutoDig_List_Type {
            get {
                return ResourceManager.GetString("ChatBot.AutoDig.List_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;distance&quot; or &quot;index&quot;, When using the &quot;fixedpos&quot; mode, the blocks are determined by distance to the player, or by the order in the list..
        /// </summary>
        internal static string ChatBot_AutoDig_Location_Order {
            get {
                return ResourceManager.GetString("ChatBot.AutoDig.Location_Order", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The position of the blocks when using &quot;fixedpos&quot; or &quot;both&quot; mode..
        /// </summary>
        internal static string ChatBot_AutoDig_Locations {
            get {
                return ResourceManager.GetString("ChatBot.AutoDig.Locations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to output logs when digging blocks..
        /// </summary>
        internal static string ChatBot_AutoDig_Log_Block_Dig {
            get {
                return ResourceManager.GetString("ChatBot.AutoDig.Log_Block_Dig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;lookat&quot;, &quot;fixedpos&quot; or &quot;both&quot;. Digging the block being looked at, the block in a fixed position, or the block that needs to be all met..
        /// </summary>
        internal static string ChatBot_AutoDig_Mode {
            get {
                return ResourceManager.GetString("ChatBot.AutoDig.Mode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically drop items in inventory
        ///You need to enable Inventory Handling to use this bot
        ///See this file for an up-to-date list of item types you can use with this bot: https://mccteam.github.io/r/item/#L12.
        /// </summary>
        internal static string ChatBot_AutoDrop {
            get {
                return ResourceManager.GetString("ChatBot.AutoDrop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;include&quot;, &quot;exclude&quot; or &quot;everything&quot;. Include: drop item IN the list. Exclude: drop item NOT IN the list.
        /// </summary>
        internal static string ChatBot_AutoDrop_Mode {
            get {
                return ResourceManager.GetString("ChatBot.AutoDrop.Mode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically eat food when your Hunger value is low
        ///You need to enable Inventory Handling to use this bot.
        /// </summary>
        internal static string ChatBot_AutoEat {
            get {
                return ResourceManager.GetString("ChatBot.AutoEat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically catch fish using a fishing rod
        ///Guide: https://mccteam.github.io/g/bots/#auto-fishing
        ///You can use &quot;/fish&quot; to control the bot manually.
        ////!\ Make sure server rules allow automated farming before using this bot.
        /// </summary>
        internal static string ChatBot_AutoFishing {
            get {
                return ResourceManager.GetString("ChatBot.AutoFishing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Keep it as false if you have not changed it before..
        /// </summary>
        internal static string ChatBot_AutoFishing_Antidespawn {
            get {
                return ResourceManager.GetString("ChatBot.AutoFishing.Antidespawn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switch to a new rod from inventory after the current rod is unavailable..
        /// </summary>
        internal static string ChatBot_AutoFishing_Auto_Rod_Switch {
            get {
                return ResourceManager.GetString("ChatBot.AutoFishing.Auto_Rod_Switch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to start fishing automatically after entering a world..
        /// </summary>
        internal static string ChatBot_AutoFishing_Auto_Start {
            get {
                return ResourceManager.GetString("ChatBot.AutoFishing.Auto_Start", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How soon to re-cast after successful fishing..
        /// </summary>
        internal static string ChatBot_AutoFishing_Cast_Delay {
            get {
                return ResourceManager.GetString("ChatBot.AutoFishing.Cast_Delay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Will not use rods with less durability than this (full durability is 64). Set to zero to disable this feature..
        /// </summary>
        internal static string ChatBot_AutoFishing_Durability_Limit {
            get {
                return ResourceManager.GetString("ChatBot.AutoFishing.Durability_Limit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This allows the player to change position/facing after each fish caught..
        /// </summary>
        internal static string ChatBot_AutoFishing_Enable_Move {
            get {
                return ResourceManager.GetString("ChatBot.AutoFishing.Enable_Move", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How long after entering the game to start fishing (seconds)..
        /// </summary>
        internal static string ChatBot_AutoFishing_Fishing_Delay {
            get {
                return ResourceManager.GetString("ChatBot.AutoFishing.Fishing_Delay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fishing timeout (seconds). Timeout will trigger a re-cast..
        /// </summary>
        internal static string ChatBot_AutoFishing_Fishing_Timeout {
            get {
                return ResourceManager.GetString("ChatBot.AutoFishing.Fishing_Timeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A &quot;stationary&quot; hook that moves above this threshold in the Y-axis will be considered to have caught a fish..
        /// </summary>
        internal static string ChatBot_AutoFishing_Hook_Threshold {
            get {
                return ResourceManager.GetString("ChatBot.AutoFishing.Hook_Threshold", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used to adjust the above two thresholds, which when enabled will print the change in the position of the fishhook entity upon receipt of its movement packet..
        /// </summary>
        internal static string ChatBot_AutoFishing_Log_Fish_Bobber {
            get {
                return ResourceManager.GetString("ChatBot.AutoFishing.Log_Fish_Bobber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the mainhand or the offhand to hold the rod..
        /// </summary>
        internal static string ChatBot_AutoFishing_Mainhand {
            get {
                return ResourceManager.GetString("ChatBot.AutoFishing.Mainhand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It will move in order &quot;1-&gt;2-&gt;3-&gt;4-&gt;3-&gt;2-&gt;1-&gt;2-&gt;...&quot; and can change position or facing or both each time. It is recommended to change the facing only..
        /// </summary>
        internal static string ChatBot_AutoFishing_Movements {
            get {
                return ResourceManager.GetString("ChatBot.AutoFishing.Movements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hook movement in the X and Z axis less than this value will be considered stationary..
        /// </summary>
        internal static string ChatBot_AutoFishing_Stationary_Threshold {
            get {
                return ResourceManager.GetString("ChatBot.AutoFishing.Stationary_Threshold", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically relog when disconnected by server, for example because the server is restating
        ////!\ Use Ignore_Kick_Message=true at own risk! Server staff might not appreciate if you auto-relog on manual kicks.
        /// </summary>
        internal static string ChatBot_AutoRelog {
            get {
                return ResourceManager.GetString("ChatBot.AutoRelog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The delay time before joining the server. (in seconds).
        /// </summary>
        internal static string ChatBot_AutoRelog_Delay {
            get {
                return ResourceManager.GetString("ChatBot.AutoRelog.Delay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When set to true, autorelog will reconnect regardless of kick messages..
        /// </summary>
        internal static string ChatBot_AutoRelog_Ignore_Kick_Message {
            get {
                return ResourceManager.GetString("ChatBot.AutoRelog.Ignore_Kick_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the kickout message matches any of the strings, then autorelog will be triggered..
        /// </summary>
        internal static string ChatBot_AutoRelog_Kick_Messages {
            get {
                return ResourceManager.GetString("ChatBot.AutoRelog.Kick_Messages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Retries when failing to relog to the server. use -1 for unlimited retries..
        /// </summary>
        internal static string ChatBot_AutoRelog_Retries {
            get {
                return ResourceManager.GetString("ChatBot.AutoRelog.Retries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Run commands or send messages automatically when a specified pattern is detected in chat
        ///Server admins can spoof chat messages (/nick, /tellraw) so keep this in mind when implementing AutoRespond rules
        ////!\ This bot may get spammy depending on your rules, although the global messagecooldown setting can help you avoiding accidental spam.
        /// </summary>
        internal static string ChatBot_AutoRespond {
            get {
                return ResourceManager.GetString("ChatBot.AutoRespond", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not remove colors from text (Note: Your matches will have to include color codes (ones using the § character) in order to work).
        /// </summary>
        internal static string ChatBot_AutoRespond_Match_Colors {
            get {
                return ResourceManager.GetString("ChatBot.AutoRespond.Match_Colors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs chat messages in a file on disk..
        /// </summary>
        internal static string ChatBot_ChatLog {
            get {
                return ResourceManager.GetString("ChatBot.ChatLog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This bot allows you to send and recieve messages and commands via a Discord channel.
        ///For Setup you can either use the documentation or read here (Documentation has images).
        ///Documentation: https://mccteam.github.io/g/bots/#discord-bridge
        ///Setup:
        ///First you need to create a Bot on the Discord Developers Portal, here is a video tutorial: https://www.youtube.com/watch?v=2FgMnZViNPA .
        ////!\ IMPORTANT /!\: When creating a bot, you MUST ENABLE &quot;Message Content Intent&quot;, &quot;Server Members Intent&quot; and &quot;Presence Intent [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ChatBot_DiscordBridge {
            get {
                return ResourceManager.GetString("ChatBot.DiscordBridge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ID of a channel where you want to interact with the MCC using the bot..
        /// </summary>
        internal static string ChatBot_DiscordBridge_ChannelId {
            get {
                return ResourceManager.GetString("ChatBot.DiscordBridge.ChannelId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message formats
        ///Words wrapped with { and } are going to be replaced during the code execution, do not change them!
        ///For example. {message} is going to be replace with an actual message, {username} will be replaced with an username, {timestamp} with the current time.
        ///For Discord message formatting, check the following: https://mccteam.github.io/r/dc-fmt.html.
        /// </summary>
        internal static string ChatBot_DiscordBridge_Formats {
            get {
                return ResourceManager.GetString("ChatBot.DiscordBridge.Formats", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ID of a server/guild where you have invited the bot to..
        /// </summary>
        internal static string ChatBot_DiscordBridge_GuildId {
            get {
                return ResourceManager.GetString("ChatBot.DiscordBridge.GuildId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How long to wait (in seconds) if a message can not be sent to discord before canceling the task (minimum 1 second)..
        /// </summary>
        internal static string ChatBot_DiscordBridge_MessageSendTimeout {
            get {
                return ResourceManager.GetString("ChatBot.DiscordBridge.MessageSendTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A list of IDs of people you want to be able to interact with the MCC using the bot..
        /// </summary>
        internal static string ChatBot_DiscordBridge_OwnersIds {
            get {
                return ResourceManager.GetString("ChatBot.DiscordBridge.OwnersIds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your Discord Bot token..
        /// </summary>
        internal static string ChatBot_DiscordBridge_Token {
            get {
                return ResourceManager.GetString("ChatBot.DiscordBridge.Token", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically farms crops for you (plants, breaks and bonemeals them).
        ///Crop types available: Beetroot, Carrot, Melon, Netherwart, Pumpkin, Potato, Wheat.
        ///Usage: &quot;/farmer start&quot; command and &quot;/farmer stop&quot; command.
        ///NOTE: This a newly added bot, it is not perfect and was only tested in 1.19.2, there are some minor issues like not being able to bonemeal carrots/potatoes sometimes.
        ///or bot jumps onto the farm land and breaks it (this happens rarely but still happens). We are looking forward at improving this. [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ChatBot_Farmer {
            get {
                return ResourceManager.GetString("ChatBot.Farmer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delay between tasks in seconds (Minimum 1 second).
        /// </summary>
        internal static string ChatBot_Farmer_Delay_Between_Tasks {
            get {
                return ResourceManager.GetString("ChatBot.Farmer.Delay_Between_Tasks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enabled you to make the bot follow you
        ///NOTE: This is an experimental feature, the bot can be slow at times, you need to walk with a normal speed and to sometimes stop for it to be able to keep up with you
        ///It&apos;s similar to making animals follow you when you&apos;re holding food in your hand.
        ///This is due to a slow pathfinding algorithm, we&apos;re working on getting a better one
        ///You can tweak the update limit and find what works best for you. (NOTE: Do not but a very low one, because you might achieve the opposite,        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ChatBot_FollowPlayer {
            get {
                return ResourceManager.GetString("ChatBot.FollowPlayer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not follow the player if he is in the range of 3 blocks (prevents the bot from pushing a player in an infinite loop).
        /// </summary>
        internal static string ChatBot_FollowPlayer_Stop_At_Distance {
            get {
                return ResourceManager.GetString("ChatBot.FollowPlayer.Stop_At_Distance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The rate at which the bot does calculations (in seconds) (You can tweak this if you feel the bot is too slow).
        /// </summary>
        internal static string ChatBot_FollowPlayer_Update_Limit {
            get {
                return ResourceManager.GetString("ChatBot.FollowPlayer.Update_Limit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A small game to demonstrate chat interactions. Players can guess mystery words one letter at a time.
        ///You need to have ChatFormat working correctly and add yourself in botowners to start the game with /tell &lt;bot username&gt; start
        ////!\ This bot may get a bit spammy if many players are interacting with it.
        /// </summary>
        internal static string ChatBot_HangmanGame {
            get {
                return ResourceManager.GetString("ChatBot.HangmanGame", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Chat Bot that collects items on the ground.
        /// </summary>
        internal static string ChatBot_ItemsCollector {
            get {
                return ResourceManager.GetString("ChatBot.ItemsCollector", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If set to true, the bot will return to it&apos;s starting position after there are no items to collect.
        /// </summary>
        internal static string ChatBot_ItemsCollector_Always_Return_To_Start {
            get {
                return ResourceManager.GetString("ChatBot.ItemsCollector.Always_Return_To_Start", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If set to true, the bot will collect all items, regardless of their type. If you want to use the whitelisted item types, disable this by setting it to false.
        /// </summary>
        internal static string ChatBot_ItemsCollector_Collect_All_Item_Types {
            get {
                return ResourceManager.GetString("ChatBot.ItemsCollector.Collect_All_Item_Types", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The radius in which bot will look for items to collect (Default: 30).
        /// </summary>
        internal static string ChatBot_ItemsCollector_Collection_Radius {
            get {
                return ResourceManager.GetString("ChatBot.ItemsCollector.Collection_Radius", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delay in milliseconds between bot scanning items (Recommended: 300-500).
        /// </summary>
        internal static string ChatBot_ItemsCollector_Delay_Between_Tasks {
            get {
                return ResourceManager.GetString("ChatBot.ItemsCollector.Delay_Between_Tasks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this list you can specify which items the bot will collect. To enable this, set the Collect_All_Item_Types to false. (NOTE: This does not prevent the bot from accidentally picking up other items, it only goes to positions where it finds the whitelisted items)\nYou can see the list of item types here: https://raw.githubusercontent.com/MCCTeam/Minecraft-Console-Client/master/MinecraftClient/Inventory/ItemType.cs.
        /// </summary>
        internal static string ChatBot_ItemsCollector_Items_Whitelist {
            get {
                return ResourceManager.GetString("ChatBot.ItemsCollector.Items_Whitelist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If set to true, the bot will go after clustered items instead for the closest ones.
        /// </summary>
        internal static string ChatBot_ItemsCollector_Prioritize_Clusters {
            get {
                return ResourceManager.GetString("ChatBot.ItemsCollector.Prioritize_Clusters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Relay messages between players and servers, like a mail plugin
        ///This bot can store messages when the recipients are offline, and send them when they join the server
        ////!\ Server admins can spoof PMs (/tellraw, /nick) so enable this bot only if you trust server admins.
        /// </summary>
        internal static string ChatBot_Mailer {
            get {
                return ResourceManager.GetString("ChatBot.Mailer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allows you to render maps in the console and into images (which can be then sent to Discord using Discord Bridge Chat Bot)
        ///This is useful for solving captchas which use maps
        ///The maps are rendered into Rendered_Maps folder if the Save_To_File is enabled.
        ///NOTE:
        ///If some servers have a very short time for solving captchas, enabe Auto_Render_On_Update to see them immediatelly in the console.
        ////!\ Make sure server rules allow bots to be used on the server, or you risk being punished..
        /// </summary>
        internal static string ChatBot_Map {
            get {
                return ResourceManager.GetString("ChatBot.Map", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically render the map once it is received or updated from/by the server.
        /// </summary>
        internal static string ChatBot_Map_Auto_Render_On_Update {
            get {
                return ResourceManager.GetString("ChatBot.Map.Auto_Render_On_Update", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delete all rendered maps on unload/reload or when you launch the MCC again..
        /// </summary>
        internal static string ChatBot_Map_Delete_All_On_Unload {
            get {
                return ResourceManager.GetString("ChatBot.Map.Delete_All_On_Unload", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Get a notification when you have gotten a map from the server for the first time.
        /// </summary>
        internal static string ChatBot_Map_Notify_On_First_Update {
            get {
                return ResourceManager.GetString("ChatBot.Map.Notify_On_First_Update", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resize an rendered image, this is useful when images that are rendered are small and when are being sent to Discord..
        /// </summary>
        internal static string ChatBot_Map_Rasize_Rendered_Image {
            get {
                return ResourceManager.GetString("ChatBot.Map.Rasize_Rendered_Image", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to render the map in the console..
        /// </summary>
        internal static string ChatBot_Map_Render_In_Console {
            get {
                return ResourceManager.GetString("ChatBot.Map.Render_In_Console", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size that a rendered image should be resized to, in pixels (eg. 512)..
        /// </summary>
        internal static string ChatBot_Map_Resize_To {
            get {
                return ResourceManager.GetString("ChatBot.Map.Resize_To", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to store the rendered map as a file (You need this setting if you want to get a map on Discord using Discord Bridge)..
        /// </summary>
        internal static string ChatBot_Map_Save_To_File {
            get {
                return ResourceManager.GetString("ChatBot.Map.Save_To_File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Send a rendered map (saved to a file) to a Discord or a Telegram channel via the Discord or Telegram Bride chat bot (The Discord/Telegram Bridge chat bot must be enabled and configured!)
        ///You need to enable Save_To_File in order for this to work.
        ///We also recommend turning on resizing..
        /// </summary>
        internal static string ChatBot_Map_Send_Rendered_To_Bridges {
            get {
                return ResourceManager.GetString("ChatBot.Map.Send_Rendered_To_Bridges", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log the list of players periodically into a textual file..
        /// </summary>
        internal static string ChatBot_PlayerListLogger {
            get {
                return ResourceManager.GetString("ChatBot.PlayerListLogger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (In seconds).
        /// </summary>
        internal static string ChatBot_PlayerListLogger_Delay {
            get {
                return ResourceManager.GetString("ChatBot.PlayerListLogger.Delay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Send MCC console commands to your bot through server PMs (/tell)
        ///You need to have ChatFormat working correctly and add yourself in botowners to use the bot
        ////!\ Server admins can spoof PMs (/tellraw, /nick) so enable RemoteControl only if you trust server admins.
        /// </summary>
        internal static string ChatBot_RemoteControl {
            get {
                return ResourceManager.GetString("ChatBot.RemoteControl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable recording of the game (/replay start) and replay it later using the Replay Mod (https://www.replaymod.com/)
        ///Please note that due to technical limitations, the client player (you) will not be shown in the replay file
        ////!\ You SHOULD use /replay stop or exit the program gracefully with /quit OR THE REPLAY FILE MAY GET CORRUPT!.
        /// </summary>
        internal static string ChatBot_ReplayCapture {
            get {
                return ResourceManager.GetString("ChatBot.ReplayCapture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How long should replay file be auto-saved, in seconds. Use -1 to disable..
        /// </summary>
        internal static string ChatBot_ReplayCapture_Backup_Interval {
            get {
                return ResourceManager.GetString("ChatBot.ReplayCapture.Backup_Interval", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Schedule commands and scripts to launch on various events such as server join, date/time or time interval
        ///See https://mccteam.github.io/g/bots/#script-scheduler for more info.
        /// </summary>
        internal static string ChatBot_ScriptScheduler {
            get {
                return ResourceManager.GetString("ChatBot.ScriptScheduler", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This bot allows you to send and receive messages and commands via a Telegram Bot DM or to receive messages in a Telegram channel.
        ////!\ NOTE: You can&apos;t send messages and commands from a group channel, you can only send them in the bot DM, but you can get the messages from the client in a group channel.
        ///-----------------------------------------------------------
        ///Setup:
        ///First you need to create a Telegram bot and obtain an API key, to do so, go to Telegram and find @botfather
        ///Click on &quot;Start&quot; button and re [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ChatBot_TelegramBridge {
            get {
                return ResourceManager.GetString("ChatBot.TelegramBridge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A list of Chat IDs that are allowed to send messages and execute commands. To get an id of your chat DM with the bot use &quot;.chatid&quot; bot command in Telegram..
        /// </summary>
        internal static string ChatBot_TelegramBridge_Authorized_Chat_Ids {
            get {
                return ResourceManager.GetString("ChatBot.TelegramBridge.Authorized_Chat_Ids", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An ID of a channel where you want to interact with the MCC using the bot..
        /// </summary>
        internal static string ChatBot_TelegramBridge_ChannelId {
            get {
                return ResourceManager.GetString("ChatBot.TelegramBridge.ChannelId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message formats
        ///Words wrapped with { and } are going to be replaced during the code execution, do not change them!
        ///For example. {message} is going to be replace with an actual message, {username} will be replaced with an username, {timestamp} with the current time.
        ///For Telegram message formatting, check the following: https://mccteam.github.io/r/tg-fmt.html.
        /// </summary>
        internal static string ChatBot_TelegramBridge_Formats {
            get {
                return ResourceManager.GetString("ChatBot.TelegramBridge.Formats", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How long to wait (in seconds) if a message can not be sent to Telegram before canceling the task (minimum 1 second)..
        /// </summary>
        internal static string ChatBot_TelegramBridge_MessageSendTimeout {
            get {
                return ResourceManager.GetString("ChatBot.TelegramBridge.MessageSendTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your Telegram Bot token..
        /// </summary>
        internal static string ChatBot_TelegramBridge_Token {
            get {
                return ResourceManager.GetString("ChatBot.TelegramBridge.Token", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remotely control the client using Web Sockets.\n# This is useful if you want to implement an application that can remotely and asynchronously execute procedures in MCC.\n# Example implementation written in JavaScript: https://github.com/milutinke/MCC.js.git\n# The protocol specification will be available in the documentation soon..
        /// </summary>
        internal static string ChatBot_WebSocketBot {
            get {
                return ResourceManager.GetString("ChatBot.WebSocketBot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This setting is for developers who are developing a library that uses this chat bot to remotely execute procedures/commands/functions..
        /// </summary>
        internal static string ChatBot_WebSocketBot_DebugMode {
            get {
                return ResourceManager.GetString("ChatBot.WebSocketBot.DebugMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IP address that Websocket server will be bound to..
        /// </summary>
        internal static string ChatBot_WebSocketBot_Ip {
            get {
                return ResourceManager.GetString("ChatBot.WebSocketBot.Ip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A password that will be used to authenticate on thw Websocket server (It is recommended to change the default password and to set a strong one)..
        /// </summary>
        internal static string ChatBot_WebSocketBot_Password {
            get {
                return ResourceManager.GetString("ChatBot.WebSocketBot.Password", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Port that Websocket server will be bounded to..
        /// </summary>
        internal static string ChatBot_WebSocketBot_Port {
            get {
                return ResourceManager.GetString("ChatBot.WebSocketBot.Port", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MCC does it best to detect chat messages, but some server have unusual chat formats
        ///When this happens, you&apos;ll need to configure chat format below, see https://mccteam.github.io/g/conf/#chat-format-section.
        /// </summary>
        internal static string ChatFormat {
            get {
                return ResourceManager.GetString("ChatFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MCC support for common message formats. Set &quot;false&quot; to avoid conflicts with custom formats..
        /// </summary>
        internal static string ChatFormat_Builtins {
            get {
                return ResourceManager.GetString("ChatFormat.Builtins", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to use the custom regular expressions below for detection..
        /// </summary>
        internal static string ChatFormat_UserDefined {
            get {
                return ResourceManager.GetString("ChatFormat.UserDefined", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Console-related settings..
        /// </summary>
        internal static string Console {
            get {
                return ResourceManager.GetString("Console", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The settings for command completion suggestions.
        ///Custom colors are only available when using &quot;vt100_24bit&quot; color mode..
        /// </summary>
        internal static string Console_CommandSuggestion {
            get {
                return ResourceManager.GetString("Console.CommandSuggestion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to display command suggestions in the console..
        /// </summary>
        internal static string Console_CommandSuggestion_Enable {
            get {
                return ResourceManager.GetString("Console.CommandSuggestion.Enable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable this option if the arrows in the command suggestions are not displayed properly in your terminal..
        /// </summary>
        internal static string Console_CommandSuggestion_Use_Basic_Arrow {
            get {
                return ResourceManager.GetString("Console.CommandSuggestion.Use_Basic_Arrow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &quot;disable&quot;, &quot;legacy_4bit&quot;, &quot;vt100_4bit&quot;, &quot;vt100_8bit&quot; or &quot;vt100_24bit&quot;. If a garbled code like &quot;←[0m&quot; appears on the terminal, you can try switching to &quot;legacy_4bit&quot; mode, or just disable it..
        /// </summary>
        internal static string Console_General_ConsoleColorMode {
            get {
                return ResourceManager.GetString("Console.General.ConsoleColorMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can use &quot;Ctrl+P&quot; to print out the current input and cursor position..
        /// </summary>
        internal static string Console_General_Display_Input {
            get {
                return ResourceManager.GetString("Console.General.Display_Input", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Startup Config File
        ///Please do not record extraneous data in this file as it will be overwritten by MCC.
        ///
        ///New to Minecraft Console Client? Check out this document: https://mccteam.github.io/g/conf.html
        ///Want to upgrade to a newer version? See https://github.com/MCCTeam/Minecraft-Console-Client/#download.
        /// </summary>
        internal static string Head {
            get {
                return ResourceManager.GetString("Head", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This setting affects only the messages in the console..
        /// </summary>
        internal static string Logging {
            get {
                return ResourceManager.GetString("Logging", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Regex for filtering chat message..
        /// </summary>
        internal static string Logging_ChatFilter {
            get {
                return ResourceManager.GetString("Logging.ChatFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show server chat messages..
        /// </summary>
        internal static string Logging_ChatMessages {
            get {
                return ResourceManager.GetString("Logging.ChatMessages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Regex for filtering debug message..
        /// </summary>
        internal static string Logging_DebugFilter {
            get {
                return ResourceManager.GetString("Logging.DebugFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please enable this before submitting bug reports. Thanks!.
        /// </summary>
        internal static string Logging_DebugMessages {
            get {
                return ResourceManager.GetString("Logging.DebugMessages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show error messages..
        /// </summary>
        internal static string Logging_ErrorMessages {
            get {
                return ResourceManager.GetString("Logging.ErrorMessages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;disable&quot; or &quot;blacklist&quot; OR &quot;whitelist&quot;. Blacklist hide message match regex. Whitelist show message match regex..
        /// </summary>
        internal static string Logging_FilterMode {
            get {
                return ResourceManager.GetString("Logging.FilterMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Informative messages. (i.e Most of the message from MCC).
        /// </summary>
        internal static string Logging_InfoMessages {
            get {
                return ResourceManager.GetString("Logging.InfoMessages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log file name..
        /// </summary>
        internal static string Logging_LogFile {
            get {
                return ResourceManager.GetString("Logging.LogFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Write log messages to file..
        /// </summary>
        internal static string Logging_LogToFile {
            get {
                return ResourceManager.GetString("Logging.LogToFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prepend timestamp to messages in log file..
        /// </summary>
        internal static string Logging_PrependTimestamp {
            get {
                return ResourceManager.GetString("Logging.PrependTimestamp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Keep color codes in the saved text.(look like &quot;§b&quot;).
        /// </summary>
        internal static string Logging_SaveColorCodes {
            get {
                return ResourceManager.GetString("Logging.SaveColorCodes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show warning messages..
        /// </summary>
        internal static string Logging_WarningMessages {
            get {
                return ResourceManager.GetString("Logging.WarningMessages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make sure you understand what each setting does before changing anything!.
        /// </summary>
        internal static string Main_Advanced {
            get {
                return ResourceManager.GetString("Main.Advanced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AccountList: It allows a fast account switching without directly using the credentials
        ///Usage examples: &quot;/tell &lt;mybot&gt; reco Player2&quot;, &quot;/connect &lt;serverip&gt; Player1&quot;.
        /// </summary>
        internal static string Main_Advanced_account_list {
            get {
                return ResourceManager.GetString("Main.Advanced.account_list", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Toggle auto respawn if client player was dead (make sure your spawn point is safe)..
        /// </summary>
        internal static string Main_Advanced_auto_respawn {
            get {
                return ResourceManager.GetString("Main.Advanced.auto_respawn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set the owner of the bot. /!\ Server admins can impersonate owners!.
        /// </summary>
        internal static string Main_Advanced_bot_owners {
            get {
                return ResourceManager.GetString("Main.Advanced.bot_owners", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &quot;mcc&quot;, &quot;vanilla&quot; or &quot;none&quot;. This is how MCC identifies itself to the server..
        /// </summary>
        internal static string Main_Advanced_brand_info {
            get {
                return ResourceManager.GetString("Main.Advanced.brand_info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Leave empty for no logfile..
        /// </summary>
        internal static string Main_Advanced_chatbot_log_file {
            get {
                return ResourceManager.GetString("Main.Advanced.chatbot_log_file", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If turned off, the emoji will be replaced with a simpler character (for /chunk status)..
        /// </summary>
        internal static string Main_Advanced_enable_emoji {
            get {
                return ResourceManager.GetString("Main.Advanced.enable_emoji", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Toggle entity handling..
        /// </summary>
        internal static string Main_Advanced_entity_handling {
            get {
                return ResourceManager.GetString("Main.Advanced.entity_handling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to exit directly when an error occurs, for using MCC in non-interactive scripts..
        /// </summary>
        internal static string Main_Advanced_exit_on_failure {
            get {
                return ResourceManager.GetString("Main.Advanced.exit_on_failure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ignore invalid player name.
        /// </summary>
        internal static string Main_Advanced_ignore_invalid_playername {
            get {
                return ResourceManager.GetString("Main.Advanced.ignore_invalid_playername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &quot;none&quot;, &quot;slash&quot;(/) or &quot;backslash&quot;(\)..
        /// </summary>
        internal static string Main_Advanced_internal_cmd_char {
            get {
                return ResourceManager.GetString("Main.Advanced.internal_cmd_char", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Toggle inventory handling..
        /// </summary>
        internal static string Main_Advanced_inventory_handling {
            get {
                return ResourceManager.GetString("Main.Advanced.inventory_handling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fill in with in-game locale code, check https://mccteam.github.io/r/l-code.html.
        /// </summary>
        internal static string Main_Advanced_language {
            get {
                return ResourceManager.GetString("Main.Advanced.language", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Load translations applied to MCC when available, turn it off to use English only..
        /// </summary>
        internal static string Main_Advanced_LoadMccTrans {
            get {
                return ResourceManager.GetString("Main.Advanced.LoadMccTrans", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &quot;auto&quot;, &quot;no&quot; or &quot;force&quot;. Force-enabling only works for MC 1.13+..
        /// </summary>
        internal static string Main_Advanced_mc_forge {
            get {
                return ResourceManager.GetString("Main.Advanced.mc_forge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &quot;auto&quot; or &quot;1.X.X&quot; values. Allows to skip server info retrieval..
        /// </summary>
        internal static string Main_Advanced_mc_version {
            get {
                return ResourceManager.GetString("Main.Advanced.mc_version", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Controls the minimum interval (in seconds) between sending each message to the server..
        /// </summary>
        internal static string Main_Advanced_message_cooldown {
            get {
                return ResourceManager.GetString("Main.Advanced.message_cooldown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable support for joining Minecraft Realms worlds..
        /// </summary>
        internal static string Main_Advanced_minecraft_realms {
            get {
                return ResourceManager.GetString("Main.Advanced.minecraft_realms", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The minimum height to use when calculating the image size from the height of the terminal..
        /// </summary>
        internal static string Main_Advanced_MinTerminalHeight {
            get {
                return ResourceManager.GetString("Main.Advanced.MinTerminalHeight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The minimum width used when calculating the image size from the width of the terminal..
        /// </summary>
        internal static string Main_Advanced_MinTerminalWidth {
            get {
                return ResourceManager.GetString("Main.Advanced.MinTerminalWidth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable head movement while walking to avoid anti-cheat triggers..
        /// </summary>
        internal static string Main_Advanced_move_head_while_walking {
            get {
                return ResourceManager.GetString("Main.Advanced.move_head_while_walking", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A movement speed higher than 2 may be considered cheating..
        /// </summary>
        internal static string Main_Advanced_movement_speed {
            get {
                return ResourceManager.GetString("Main.Advanced.movement_speed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only works on Windows XP-8 or Windows 10 with old console..
        /// </summary>
        internal static string Main_Advanced_player_head_icon {
            get {
                return ResourceManager.GetString("Main.Advanced.player_head_icon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For remote control of the bot..
        /// </summary>
        internal static string Main_Advanced_private_msgs_cmd_name {
            get {
                return ResourceManager.GetString("Main.Advanced.private_msgs_cmd_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How to retain profile key. Use &quot;none&quot;, &quot;memory&quot; or &quot;disk&quot;..
        /// </summary>
        internal static string Main_Advanced_profilekey_cache {
            get {
                return ResourceManager.GetString("Main.Advanced.profilekey_cache", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &quot;no&quot;, &quot;fast&quot; (5s timeout), or &quot;yes&quot;. Required for joining some servers..
        /// </summary>
        internal static string Main_Advanced_resolve_srv_records {
            get {
                return ResourceManager.GetString("Main.Advanced.resolve_srv_records", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cache compiled scripts for faster load on low-end devices..
        /// </summary>
        internal static string Main_Advanced_script_cache {
            get {
                return ResourceManager.GetString("Main.Advanced.script_cache", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ServerList: It allows an easier and faster server switching with short aliases instead of full server IP
        ///Aliases cannot contain dots or spaces, and the name &quot;localhost&quot; cannot be used as an alias.
        ///Usage examples: &quot;/tell &lt;mybot&gt; connect Server1&quot;, &quot;/connect Server2&quot;.
        /// </summary>
        internal static string Main_Advanced_server_list {
            get {
                return ResourceManager.GetString("Main.Advanced.server_list", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How to retain session tokens. Use &quot;none&quot;, &quot;memory&quot; or &quot;disk&quot;..
        /// </summary>
        internal static string Main_Advanced_session_cache {
            get {
                return ResourceManager.GetString("Main.Advanced.session_cache", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Decode links embedded in chat messages and show them in console..
        /// </summary>
        internal static string Main_Advanced_show_chat_links {
            get {
                return ResourceManager.GetString("Main.Advanced.show_chat_links", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show inventory layout as ASCII art in inventory command..
        /// </summary>
        internal static string Main_Advanced_show_inventory_layout {
            get {
                return ResourceManager.GetString("Main.Advanced.show_inventory_layout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to System messages for server ops..
        /// </summary>
        internal static string Main_Advanced_show_system_messages {
            get {
                return ResourceManager.GetString("Main.Advanced.show_system_messages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Messages displayed above xp bar, set this to false in case of xp bar spam..
        /// </summary>
        internal static string Main_Advanced_show_xpbar_messages {
            get {
                return ResourceManager.GetString("Main.Advanced.show_xpbar_messages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Temporary fix for Badpacket issue on some servers. Need to enable &quot;TerrainAndMovements&quot; first..
        /// </summary>
        internal static string Main_Advanced_temporary_fix_badpacket {
            get {
                return ResourceManager.GetString("Main.Advanced.temporary_fix_badpacket", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uses more ram, cpu, bandwidth but allows you to move around..
        /// </summary>
        internal static string Main_Advanced_terrain_and_movements {
            get {
                return ResourceManager.GetString("Main.Advanced.terrain_and_movements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Customize the TCP connection timeout with the server. (in seconds).
        /// </summary>
        internal static string Main_Advanced_timeout {
            get {
                return ResourceManager.GetString("Main.Advanced.timeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prepend timestamps to chat messages..
        /// </summary>
        internal static string Main_Advanced_timestamps {
            get {
                return ResourceManager.GetString("Main.Advanced.timestamps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Login=Email or Name. Use &quot;-&quot; as password for offline mode. Leave blank to prompt user on startup..
        /// </summary>
        internal static string Main_General_account {
            get {
                return ResourceManager.GetString("Main.General.account", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Yggdrasil authlib server domain name and port..
        /// </summary>
        internal static string Main_General_AuthlibServer {
            get {
                return ResourceManager.GetString("Main.General.AuthlibServer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The address of the game server, &quot;Host&quot; can be filled in with domain name or IP address. (The &quot;Port&quot; field can be deleted, it will be resolved automatically).
        /// </summary>
        internal static string Main_General_login {
            get {
                return ResourceManager.GetString("Main.General.login", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Microsoft Account sign-in method: &quot;mcc&quot; OR &quot;browser&quot;. If the login always fails, please try to use the &quot;browser&quot; once..
        /// </summary>
        internal static string Main_General_method {
            get {
                return ResourceManager.GetString("Main.General.method", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Account type: &quot;mojang&quot; OR &quot;microsoft&quot; OR &quot;yggdrasil&quot;. Also affects interactive login in console..
        /// </summary>
        internal static string Main_General_server_info {
            get {
                return ResourceManager.GetString("Main.General.server_info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Settings below are sent to the server and only affect server-side things like your skin..
        /// </summary>
        internal static string MCSettings {
            get {
                return ResourceManager.GetString("MCSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allows disabling chat colors server-side..
        /// </summary>
        internal static string MCSettings_ChatColors {
            get {
                return ResourceManager.GetString("MCSettings.ChatColors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &quot;enabled&quot;, &quot;commands&quot;, or &quot;disabled&quot;. Allows to mute yourself....
        /// </summary>
        internal static string MCSettings_ChatMode {
            get {
                return ResourceManager.GetString("MCSettings.ChatMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MC 1.7- difficulty. &quot;peaceful&quot;, &quot;easy&quot;, &quot;normal&quot;, &quot;difficult&quot;..
        /// </summary>
        internal static string MCSettings_Difficulty {
            get {
                return ResourceManager.GetString("MCSettings.Difficulty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If disabled, settings below are not sent to the server..
        /// </summary>
        internal static string MCSettings_Enabled {
            get {
                return ResourceManager.GetString("MCSettings.Enabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use any language implemented in Minecraft..
        /// </summary>
        internal static string MCSettings_Locale {
            get {
                return ResourceManager.GetString("MCSettings.Locale", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MC 1.9+ main hand. &quot;left&quot; or &quot;right&quot;..
        /// </summary>
        internal static string MCSettings_MainHand {
            get {
                return ResourceManager.GetString("MCSettings.MainHand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value range: [0 - 255]..
        /// </summary>
        internal static string MCSettings_RenderDistance {
            get {
                return ResourceManager.GetString("MCSettings.RenderDistance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connect to a server via a proxy instead of connecting directly
        ///If Mojang session services are blocked on your network, set Enabled_Login=true to login using proxy.
        ///If the connection to the Minecraft game server is blocked by the firewall, set Enabled_Ingame=true to use a proxy to connect to the game server.
        ////!\ Make sure your server rules allow Proxies or VPNs before setting enabled=true, or you may face consequences!.
        /// </summary>
        internal static string Proxy {
            get {
                return ResourceManager.GetString("Proxy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to connect to the game server through a proxy..
        /// </summary>
        internal static string Proxy_Enabled_Ingame {
            get {
                return ResourceManager.GetString("Proxy.Enabled_Ingame", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to connect to the login server through a proxy..
        /// </summary>
        internal static string Proxy_Enabled_Login {
            get {
                return ResourceManager.GetString("Proxy.Enabled_Login", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to download MCC updates via proxy..
        /// </summary>
        internal static string Proxy_Enabled_Update {
            get {
                return ResourceManager.GetString("Proxy.Enabled_Update", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only required for password-protected proxies..
        /// </summary>
        internal static string Proxy_Password {
            get {
                return ResourceManager.GetString("Proxy.Password", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Supported types: &quot;HTTP&quot;, &quot;SOCKS4&quot;, &quot;SOCKS4a&quot;, &quot;SOCKS5&quot;..
        /// </summary>
        internal static string Proxy_Proxy_Type {
            get {
                return ResourceManager.GetString("Proxy.Proxy_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Proxy server must allow HTTPS for login, and non-443 ports for playing..
        /// </summary>
        internal static string Proxy_Server {
            get {
                return ResourceManager.GetString("Proxy.Server", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only required for password-protected proxies..
        /// </summary>
        internal static string Proxy_Username {
            get {
                return ResourceManager.GetString("Proxy.Username", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Chat signature related settings (affects minecraft 1.19+).
        /// </summary>
        internal static string Signature {
            get {
                return ResourceManager.GetString("Signature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Microsoft accounts only. If disabled, will not be able to sign chat and join servers configured with &quot;enforce-secure-profile=true&quot;.
        /// </summary>
        internal static string Signature_LoginWithSecureProfile {
            get {
                return ResourceManager.GetString("Signature.LoginWithSecureProfile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use red    color block to mark chat without legitimate signature.
        /// </summary>
        internal static string Signature_MarkIllegallySignedMsg {
            get {
                return ResourceManager.GetString("Signature.MarkIllegallySignedMsg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use green  color block to mark chat with legitimate signatures.
        /// </summary>
        internal static string Signature_MarkLegallySignedMsg {
            get {
                return ResourceManager.GetString("Signature.MarkLegallySignedMsg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use yellow color block to mark chat that have been modified by the server..
        /// </summary>
        internal static string Signature_MarkModifiedMsg {
            get {
                return ResourceManager.GetString("Signature.MarkModifiedMsg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use gray   color block to mark system message (always without signature).
        /// </summary>
        internal static string Signature_MarkSystemMessage {
            get {
                return ResourceManager.GetString("Signature.MarkSystemMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to display chat and messages in commands without legal signatures.
        /// </summary>
        internal static string Signature_ShowIllegalSignedChat {
            get {
                return ResourceManager.GetString("Signature.ShowIllegalSignedChat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set to true to display messages modified by the server, false to display the original signed messages.
        /// </summary>
        internal static string Signature_ShowModifiedChat {
            get {
                return ResourceManager.GetString("Signature.ShowModifiedChat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to sign the chat send from MCC.
        /// </summary>
        internal static string Signature_SignChat {
            get {
                return ResourceManager.GetString("Signature.SignChat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to sign the messages contained in the commands sent by MCC. For example, the message in &quot;/msg&quot; and &quot;/me&quot;.
        /// </summary>
        internal static string Signature_SignMessageInCommand {
            get {
                return ResourceManager.GetString("Signature.SignMessageInCommand", resourceCulture);
            }
        }
    }
}
