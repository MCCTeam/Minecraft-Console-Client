//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MinecraftClient {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Translations {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Translations() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MinecraftClient.Resources.Translations.Translations", typeof(Translations).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §cWeather change: It is no longer raining.§r.
        /// </summary>
        internal static string bot_alerts_end_rain {
            get {
                return ResourceManager.GetString("bot.alerts.end_rain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §cWeather change: It is no longer a thunderstorm.§r.
        /// </summary>
        internal static string bot_alerts_end_thunderstorm {
            get {
                return ResourceManager.GetString("bot.alerts.end_thunderstorm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §cWeather change: It is raining now.§r.
        /// </summary>
        internal static string bot_alerts_start_rain {
            get {
                return ResourceManager.GetString("bot.alerts.start_rain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §cWeather change: It is a thunderstorm.§r.
        /// </summary>
        internal static string bot_alerts_start_thunderstorm {
            get {
                return ResourceManager.GetString("bot.alerts.start_thunderstorm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid walk range provided, must be a positive integer greater than 0, using default value of 5!.
        /// </summary>
        internal static string bot_antiafk_invalid_walk_range {
            get {
                return ResourceManager.GetString("bot.antiafk.invalid_walk_range", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The terrain handling is not enabled in the settings of the client, enable it if you want to use it with this bot. Using alternative (command) method..
        /// </summary>
        internal static string bot_antiafk_not_using_terrain_handling {
            get {
                return ResourceManager.GetString("bot.antiafk.not_using_terrain_handling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The time range begins with a bigger value, swapped them around..
        /// </summary>
        internal static string bot_antiafk_swapping {
            get {
                return ResourceManager.GetString("bot.antiafk.swapping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attack cooldown value cannot be smaller than 0..
        /// </summary>
        internal static string bot_autoAttack_invalidcooldown {
            get {
                return ResourceManager.GetString("bot.autoAttack.invalidcooldown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Crafting aborted! Check your available materials..
        /// </summary>
        internal static string bot_autoCraft_aborted {
            get {
                return ResourceManager.GetString("bot.autoCraft.aborted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto-crafting ChatBot command alias.
        /// </summary>
        internal static string bot_autoCraft_alias {
            get {
                return ResourceManager.GetString("bot.autoCraft.alias", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Available commands: {0}. Use /autocraft help &lt;cmd name&gt; for more information. You may use /ac as command alias..
        /// </summary>
        internal static string bot_autoCraft_available_cmd {
            get {
                return ResourceManager.GetString("bot.autoCraft.available_cmd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inventory #{0} was closed by AutoCraft.
        /// </summary>
        internal static string bot_autoCraft_close_inventory {
            get {
                return ResourceManager.GetString("bot.autoCraft.close_inventory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto-crafting ChatBot command.
        /// </summary>
        internal static string bot_autoCraft_cmd {
            get {
                return ResourceManager.GetString("bot.autoCraft.cmd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Total {0} recipes loaded: {1}.
        /// </summary>
        internal static string bot_autoCraft_cmd_list {
            get {
                return ResourceManager.GetString("bot.autoCraft.cmd.list", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resetting your config to default.
        /// </summary>
        internal static string bot_autoCraft_cmd_resetcfg {
            get {
                return ResourceManager.GetString("bot.autoCraft.cmd.resetcfg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Crafting failed! Waiting for more materials.
        /// </summary>
        internal static string bot_autoCraft_craft_fail {
            get {
                return ResourceManager.GetString("bot.autoCraft.craft_fail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No config found. Writing a new one..
        /// </summary>
        internal static string bot_autoCraft_debug_no_config {
            get {
                return ResourceManager.GetString("bot.autoCraft.debug.no_config", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while parsing config: {0}.
        /// </summary>
        internal static string bot_autoCraft_error_config {
            get {
                return ResourceManager.GetString("bot.autoCraft.error.config", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate recipe name specified: {0}.
        /// </summary>
        internal static string bot_autoCraft_exception_duplicate {
            get {
                return ResourceManager.GetString("bot.autoCraft.exception.duplicate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing recipe name while parsing a recipe.
        /// </summary>
        internal static string bot_autoCraft_exception_name_miss {
            get {
                return ResourceManager.GetString("bot.autoCraft.exception.name_miss", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Get the command description. Usage: /autocraft help &lt;command name&gt;.
        /// </summary>
        internal static string bot_autoCraft_help_help {
            get {
                return ResourceManager.GetString("bot.autoCraft.help.help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List available recipes..
        /// </summary>
        internal static string bot_autoCraft_help_list {
            get {
                return ResourceManager.GetString("bot.autoCraft.help.list", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Load the config file..
        /// </summary>
        internal static string bot_autoCraft_help_load {
            get {
                return ResourceManager.GetString("bot.autoCraft.help.load", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reload the config file..
        /// </summary>
        internal static string bot_autoCraft_help_reload {
            get {
                return ResourceManager.GetString("bot.autoCraft.help.reload", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Write the default example config to default location..
        /// </summary>
        internal static string bot_autoCraft_help_resetcfg {
            get {
                return ResourceManager.GetString("bot.autoCraft.help.resetcfg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start the crafting. Usage: /autocraft start &lt;recipe name&gt;.
        /// </summary>
        internal static string bot_autoCraft_help_start {
            get {
                return ResourceManager.GetString("bot.autoCraft.help.start", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stop the current running crafting process.
        /// </summary>
        internal static string bot_autoCraft_help_stop {
            get {
                return ResourceManager.GetString("bot.autoCraft.help.stop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid result item!.
        /// </summary>
        internal static string bot_autocraft_invaild_result {
            get {
                return ResourceManager.GetString("bot.autocraft.invaild_result", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of slots does not match and has been adjusted automatically..
        /// </summary>
        internal static string bot_autocraft_invaild_slots {
            get {
                return ResourceManager.GetString("bot.autocraft.invaild_slots", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Successfully loaded.
        /// </summary>
        internal static string bot_autoCraft_loaded {
            get {
                return ResourceManager.GetString("bot.autoCraft.loaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing material: {0}.
        /// </summary>
        internal static string bot_autoCraft_missing_material {
            get {
                return ResourceManager.GetString("bot.autoCraft.missing_material", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please specify the recipe name you want to craft..
        /// </summary>
        internal static string bot_autoCraft_no_recipe_name {
            get {
                return ResourceManager.GetString("bot.autoCraft.no_recipe_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified recipe name does not exist. Check your config file..
        /// </summary>
        internal static string bot_autoCraft_recipe_not_exist {
            get {
                return ResourceManager.GetString("bot.autoCraft.recipe_not_exist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Starting AutoCraft: {0}.
        /// </summary>
        internal static string bot_autoCraft_start {
            get {
                return ResourceManager.GetString("bot.autoCraft.start", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AutoCraft cannot be started. Check your available materials for crafting {0}.
        /// </summary>
        internal static string bot_autoCraft_start_fail {
            get {
                return ResourceManager.GetString("bot.autoCraft.start_fail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AutoCraft stopped.
        /// </summary>
        internal static string bot_autoCraft_stop {
            get {
                return ResourceManager.GetString("bot.autoCraft.stop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to table not found.
        /// </summary>
        internal static string bot_autoCraft_table_not_found {
            get {
                return ResourceManager.GetString("bot.autoCraft.table_not_found", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Action timeout! Reason: {0}.
        /// </summary>
        internal static string bot_autoCraft_timeout {
            get {
                return ResourceManager.GetString("bot.autoCraft.timeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Available commands: {0}. Use /digbot help &lt;cmd name&gt; for more information..
        /// </summary>
        internal static string bot_autodig_available_cmd {
            get {
                return ResourceManager.GetString("bot.autodig.available_cmd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto-digging ChatBot command.
        /// </summary>
        internal static string bot_autodig_cmd {
            get {
                return ResourceManager.GetString("bot.autodig.cmd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Digging block timeout, retry..
        /// </summary>
        internal static string bot_autodig_dig_timeout {
            get {
                return ResourceManager.GetString("bot.autodig.dig_timeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Get the command description. Usage: /digbot help &lt;command name&gt;.
        /// </summary>
        internal static string bot_autodig_help_help {
            get {
                return ResourceManager.GetString("bot.autodig.help.help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start the automatic digging bot..
        /// </summary>
        internal static string bot_autodig_help_start {
            get {
                return ResourceManager.GetString("bot.autodig.help.start", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deactivate the automatic digging bot..
        /// </summary>
        internal static string bot_autodig_help_stop {
            get {
                return ResourceManager.GetString("bot.autodig.help.stop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inventory handling is not enabled. Unable to switch tools automatically..
        /// </summary>
        internal static string bot_autodig_no_inv_handle {
            get {
                return ResourceManager.GetString("bot.autodig.no_inv_handle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The block currently pointed to is not in the allowed list..
        /// </summary>
        internal static string bot_autodig_not_allow {
            get {
                return ResourceManager.GetString("bot.autodig.not_allow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatic digging has started..
        /// </summary>
        internal static string bot_autodig_start {
            get {
                return ResourceManager.GetString("bot.autodig.start", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Digging will start in {0:0.0} second(s)..
        /// </summary>
        internal static string bot_autodig_start_delay {
            get {
                return ResourceManager.GetString("bot.autodig.start_delay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto-digging has been stopped..
        /// </summary>
        internal static string bot_autodig_stop {
            get {
                return ResourceManager.GetString("bot.autodig.stop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Added item {0}.
        /// </summary>
        internal static string bot_autoDrop_added {
            get {
                return ResourceManager.GetString("bot.autoDrop.added", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AutoDrop ChatBot command alias.
        /// </summary>
        internal static string bot_autoDrop_alias {
            get {
                return ResourceManager.GetString("bot.autoDrop.alias", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AutoDrop ChatBot command.
        /// </summary>
        internal static string bot_autoDrop_cmd {
            get {
                return ResourceManager.GetString("bot.autoDrop.cmd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Incorrect item name {0}. Please try again..
        /// </summary>
        internal static string bot_autoDrop_incorrect_name {
            get {
                return ResourceManager.GetString("bot.autoDrop.incorrect_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Total {0} in the list:
        /// {1}.
        /// </summary>
        internal static string bot_autoDrop_list {
            get {
                return ResourceManager.GetString("bot.autoDrop.list", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find inventory {0}!.
        /// </summary>
        internal static string bot_autoDrop_no_inventory {
            get {
                return ResourceManager.GetString("bot.autoDrop.no_inventory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No item in the list.
        /// </summary>
        internal static string bot_autoDrop_no_item {
            get {
                return ResourceManager.GetString("bot.autoDrop.no_item", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot read drop mode from config. Using include mode..
        /// </summary>
        internal static string bot_autoDrop_no_mode {
            get {
                return ResourceManager.GetString("bot.autoDrop.no_mode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Item not in the list.
        /// </summary>
        internal static string bot_autoDrop_not_in_list {
            get {
                return ResourceManager.GetString("bot.autoDrop.not_in_list", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AutoDrop disabled.
        /// </summary>
        internal static string bot_autoDrop_off {
            get {
                return ResourceManager.GetString("bot.autoDrop.off", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AutoDrop enabled.
        /// </summary>
        internal static string bot_autoDrop_on {
            get {
                return ResourceManager.GetString("bot.autoDrop.on", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removed item {0}.
        /// </summary>
        internal static string bot_autoDrop_removed {
            get {
                return ResourceManager.GetString("bot.autoDrop.removed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switched to {0} mode..
        /// </summary>
        internal static string bot_autoDrop_switched {
            get {
                return ResourceManager.GetString("bot.autoDrop.switched", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknwon mode. Available modes: Include, Exclude, Everything.
        /// </summary>
        internal static string bot_autoDrop_unknown_mode {
            get {
                return ResourceManager.GetString("bot.autoDrop.unknown_mode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Available commands: {0}. Use /fish help &lt;cmd name&gt; for more information..
        /// </summary>
        internal static string bot_autoFish_available_cmd {
            get {
                return ResourceManager.GetString("bot.autoFish.available_cmd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Casting timeout and will soon retry. (Timeout increased to {0:0.0} sec)..
        /// </summary>
        internal static string bot_autoFish_cast_timeout {
            get {
                return ResourceManager.GetString("bot.autoFish.cast_timeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Retract the fishing rod. (Count: {0}).
        /// </summary>
        internal static string bot_autoFish_caught {
            get {
                return ResourceManager.GetString("bot.autoFish.caught", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Retract the fishing rod at ({0:0.0},{1:0.0},{2:0.0})! (Count: {3}).
        /// </summary>
        internal static string bot_autoFish_caught_at {
            get {
                return ResourceManager.GetString("bot.autoFish.caught_at", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto-Fishing ChatBot command.
        /// </summary>
        internal static string bot_autoFish_cmd {
            get {
                return ResourceManager.GetString("bot.autoFish.cmd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fish floating despawn, will re-cast..
        /// </summary>
        internal static string bot_autoFish_despawn {
            get {
                return ResourceManager.GetString("bot.autoFish.despawn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fishing timeout, will soon re-cast..
        /// </summary>
        internal static string bot_autoFish_fishing_timeout {
            get {
                return ResourceManager.GetString("bot.autoFish.fishing_timeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fishing got {0}.
        /// </summary>
        internal static string bot_autoFish_got {
            get {
                return ResourceManager.GetString("bot.autoFish.got", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Get the command description. Usage: /fish help &lt;command name&gt;.
        /// </summary>
        internal static string bot_autoFish_help_help {
            get {
                return ResourceManager.GetString("bot.autoFish.help.help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start auto-fishing..
        /// </summary>
        internal static string bot_autoFish_help_start {
            get {
                return ResourceManager.GetString("bot.autoFish.help.start", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List all obtained items. Or use &quot;/fish status clear&quot; to clear the list..
        /// </summary>
        internal static string bot_autoFish_help_status {
            get {
                return ResourceManager.GetString("bot.autoFish.help.status", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stop auto-fishing..
        /// </summary>
        internal static string bot_autoFish_help_stop {
            get {
                return ResourceManager.GetString("bot.autoFish.help.stop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inventory handling is not enabled. Cannot check rod durability and switch rods..
        /// </summary>
        internal static string bot_autoFish_no_inv_handle {
            get {
                return ResourceManager.GetString("bot.autoFish.no_inv_handle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Current fishing rod is not available. Maybe broken or low durability?.
        /// </summary>
        internal static string bot_autoFish_no_rod {
            get {
                return ResourceManager.GetString("bot.autoFish.no_rod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start auto-fishing..
        /// </summary>
        internal static string bot_autoFish_start {
            get {
                return ResourceManager.GetString("bot.autoFish.start", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fishing will start in {0:0.0} second(s)..
        /// </summary>
        internal static string bot_autoFish_start_at {
            get {
                return ResourceManager.GetString("bot.autoFish.start_at", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The record of the obtained items has been cleared..
        /// </summary>
        internal static string bot_autoFish_status_clear {
            get {
                return ResourceManager.GetString("bot.autoFish.status_clear", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All items obtained from fishing (not entirely accurate):.
        /// </summary>
        internal static string bot_autoFish_status_info {
            get {
                return ResourceManager.GetString("bot.autoFish.status_info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stop auto-fishing..
        /// </summary>
        internal static string bot_autoFish_stop {
            get {
                return ResourceManager.GetString("bot.autoFish.stop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switch to the rod in slot {0}, durability {1}/64..
        /// </summary>
        internal static string bot_autoFish_switch {
            get {
                return ResourceManager.GetString("bot.autoFish.switch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Casting successfully..
        /// </summary>
        internal static string bot_autoFish_throw {
            get {
                return ResourceManager.GetString("bot.autoFish.throw", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update yaw = {0:0.00}, pitch = {1:0.00}..
        /// </summary>
        internal static string bot_autoFish_update_lookat {
            get {
                return ResourceManager.GetString("bot.autoFish.update_lookat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Current directory was: {0}.
        /// </summary>
        internal static string bot_autoRelog_curr_dir {
            get {
                return ResourceManager.GetString("bot.autoRelog.curr_dir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Got disconnected with message: {0}.
        /// </summary>
        internal static string bot_autoRelog_disconnect_msg {
            get {
                return ResourceManager.GetString("bot.autoRelog.disconnect_msg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disconnection initiated by User or MCC bot. Ignoring..
        /// </summary>
        internal static string bot_autoRelog_ignore_user_logout {
            get {
                return ResourceManager.GetString("bot.autoRelog.ignore_user_logout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Launching with {0} reconnection attempts.
        /// </summary>
        internal static string bot_autoRelog_launch {
            get {
                return ResourceManager.GetString("bot.autoRelog.launch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loaded message: {0}.
        /// </summary>
        internal static string bot_autoRelog_loaded {
            get {
                return ResourceManager.GetString("bot.autoRelog.loaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loading messages from file: {0}.
        /// </summary>
        internal static string bot_autoRelog_loading {
            get {
                return ResourceManager.GetString("bot.autoRelog.loading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initializing without a kick message file.
        /// </summary>
        internal static string bot_autoRelog_no_kick_msg {
            get {
                return ResourceManager.GetString("bot.autoRelog.no_kick_msg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File not found: {0}.
        /// </summary>
        internal static string bot_autoRelog_not_found {
            get {
                return ResourceManager.GetString("bot.autoRelog.not_found", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message contains &apos;{0}&apos;. Reconnecting..
        /// </summary>
        internal static string bot_autoRelog_reconnect {
            get {
                return ResourceManager.GetString("bot.autoRelog.reconnect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ignoring kick message, reconnecting anyway..
        /// </summary>
        internal static string bot_autoRelog_reconnect_always {
            get {
                return ResourceManager.GetString("bot.autoRelog.reconnect_always", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message not containing any defined keywords. Ignoring..
        /// </summary>
        internal static string bot_autoRelog_reconnect_ignore {
            get {
                return ResourceManager.GetString("bot.autoRelog.reconnect_ignore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Waiting {0:0.000} seconds before reconnecting....
        /// </summary>
        internal static string bot_autoRelog_wait {
            get {
                return ResourceManager.GetString("bot.autoRelog.wait", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File not found: &apos;{0}&apos;.
        /// </summary>
        internal static string bot_autoRespond_file_not_found {
            get {
                return ResourceManager.GetString("bot.autoRespond.file_not_found", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loaded match:
        ///{0}.
        /// </summary>
        internal static string bot_autoRespond_loaded_match {
            get {
                return ResourceManager.GetString("bot.autoRespond.loaded_match", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loading matches from &apos;{0}&apos;.
        /// </summary>
        internal static string bot_autoRespond_loading {
            get {
                return ResourceManager.GetString("bot.autoRespond.loading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to match: {0}
        ///regex: {1}
        ///action: {2}
        ///actionPrivate: {3}
        ///actionOther: {4}
        ///ownersOnly: {5}
        ///cooldown: {6}.
        /// </summary>
        internal static string bot_autoRespond_match {
            get {
                return ResourceManager.GetString("bot.autoRespond.match", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Running action: {0}.
        /// </summary>
        internal static string bot_autoRespond_match_run {
            get {
                return ResourceManager.GetString("bot.autoRespond.match_run", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No action for match:
        ///{0}.
        /// </summary>
        internal static string bot_autoRespond_no_action {
            get {
                return ResourceManager.GetString("bot.autoRespond.no_action", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This match will never trigger:
        ///{0}.
        /// </summary>
        internal static string bot_autoRespond_no_trigger {
            get {
                return ResourceManager.GetString("bot.autoRespond.no_trigger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path &apos;{0}&apos; contains invalid characters..
        /// </summary>
        internal static string bot_chatLog_invalid_file {
            get {
                return ResourceManager.GetString("bot.chatLog.invalid_file", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sending message to Discord was canceled due an error occuring. For more info enable Debug..
        /// </summary>
        internal static string bot_DiscordBridge_canceled_sending {
            get {
                return ResourceManager.GetString("bot.DiscordBridge.canceled_sending", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided channel with an id &apos;{0}&apos; has not been found!.
        /// </summary>
        internal static string bot_DiscordBridge_channel_not_found {
            get {
                return ResourceManager.GetString("bot.DiscordBridge.channel_not_found", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command was executed with the result.
        /// </summary>
        internal static string bot_DiscordBridge_command_executed {
            get {
                return ResourceManager.GetString("bot.DiscordBridge.command_executed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Succesfully connected with MCC!.
        /// </summary>
        internal static string bot_DiscordBridge_connected {
            get {
                return ResourceManager.GetString("bot.DiscordBridge.connected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command allows you to specify in the which direction the messages will be relayed via the Discord Bridge chat bot..
        /// </summary>
        internal static string bot_DiscordBridge_desc {
            get {
                return ResourceManager.GetString("bot.DiscordBridge.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Direction of the Discord Brdige has been switched to &apos;{0}&apos;!.
        /// </summary>
        internal static string bot_DiscordBridge_direction {
            get {
                return ResourceManager.GetString("bot.DiscordBridge.direction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Both.
        /// </summary>
        internal static string bot_DiscordBridge_direction_both {
            get {
                return ResourceManager.GetString("bot.DiscordBridge.direction.both", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Discord.
        /// </summary>
        internal static string bot_DiscordBridge_direction_discord {
            get {
                return ResourceManager.GetString("bot.DiscordBridge.direction.discord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Minecraft.
        /// </summary>
        internal static string bot_DiscordBridge_direction_minecraft {
            get {
                return ResourceManager.GetString("bot.DiscordBridge.direction.minecraft", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Successfully disconnected with MCC!.
        /// </summary>
        internal static string bot_DiscordBridge_disconnected {
            get {
                return ResourceManager.GetString("bot.DiscordBridge.disconnected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided guild/server with an id &apos;{0}&apos; has not been found!.
        /// </summary>
        internal static string bot_DiscordBridge_guild_not_found {
            get {
                return ResourceManager.GetString("bot.DiscordBridge.guild_not_found", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid direction provided! Available directions: both|b, minecraft|mc, discord|dsc. Example: &quot;dscbridge direction mc&quot;.
        /// </summary>
        internal static string bot_DiscordBridge_invalid_direction {
            get {
                return ResourceManager.GetString("bot.DiscordBridge.invalid_direction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please provide a valid token!.
        /// </summary>
        internal static string bot_DiscordBridge_missing_token {
            get {
                return ResourceManager.GetString("bot.DiscordBridge.missing_token", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unknown error has occured!.
        /// </summary>
        internal static string bot_DiscordBridge_unknown_error {
            get {
                return ResourceManager.GetString("bot.DiscordBridge.unknown_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The bot is already farming!.
        /// </summary>
        internal static string bot_farmer_already_running {
            get {
                return ResourceManager.GetString("bot.farmer.already_running", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The bot has already stopped farming!.
        /// </summary>
        internal static string bot_farmer_already_stopped {
            get {
                return ResourceManager.GetString("bot.farmer.already_stopped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Crop type.
        /// </summary>
        internal static string bot_farmer_crop_type {
            get {
                return ResourceManager.GetString("bot.farmer.crop_type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Farming bot.
        /// </summary>
        internal static string bot_farmer_desc {
            get {
                return ResourceManager.GetString("bot.farmer.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid crop type provided (Types which you can use: Beetroot, Carrot, Melon, Netherwart, Pumpkin, Potato, Wheat)!.
        /// </summary>
        internal static string bot_farmer_invalid_crop_type {
            get {
                return ResourceManager.GetString("bot.farmer.invalid_crop_type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid radius provided, you must provide a valid integer number greater than 0!.
        /// </summary>
        internal static string bot_farmer_invalid_radius {
            get {
                return ResourceManager.GetString("bot.farmer.invalid_radius", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Farmer bot needs Inventory Handling in order to work, please enable it!.
        /// </summary>
        internal static string bot_farmer_needs_inventory {
            get {
                return ResourceManager.GetString("bot.farmer.needs_inventory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Farmer bot needs Terrain Handling in order to work, please enable it!.
        /// </summary>
        internal static string bot_farmer_needs_terrain {
            get {
                return ResourceManager.GetString("bot.farmer.needs_terrain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not implemented bellow 1.13!.
        /// </summary>
        internal static string bot_farmer_not_implemented {
            get {
                return ResourceManager.GetString("bot.farmer.not_implemented", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Radius.
        /// </summary>
        internal static string bot_farmer_radius {
            get {
                return ResourceManager.GetString("bot.farmer.radius", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Started farming!.
        /// </summary>
        internal static string bot_farmer_started {
            get {
                return ResourceManager.GetString("bot.farmer.started", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stopped farming!.
        /// </summary>
        internal static string bot_farmer_stopped {
            get {
                return ResourceManager.GetString("bot.farmer.stopped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stoping farming, this might take a second....
        /// </summary>
        internal static string bot_farmer_stopping {
            get {
                return ResourceManager.GetString("bot.farmer.stopping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have enabled teleporting, this might get your bot account kicked and in the worst case scenario banned! Use with caution!.
        /// </summary>
        internal static string bot_farmer_warining_allow_teleport {
            get {
                return ResourceManager.GetString("bot.farmer.warining_allow_teleport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have enabled un-safe movement, the bot might get hurt!.
        /// </summary>
        internal static string bot_farmer_warining_force_unsafe {
            get {
                return ResourceManager.GetString("bot.farmer.warining_force_unsafe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid parameter &quot;{0}&quot; provided (Use format: &quot;key:value&quot;)!.
        /// </summary>
        internal static string bot_farmer_warining_invalid_parameter {
            get {
                return ResourceManager.GetString("bot.farmer.warining_invalid_parameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to mailer command.
        /// </summary>
        internal static string bot_mailer_cmd {
            get {
                return ResourceManager.GetString("bot.mailer.cmd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to --- Ignore list ---
        ///{0}.
        /// </summary>
        internal static string bot_mailer_cmd_getignored {
            get {
                return ResourceManager.GetString("bot.mailer.cmd.getignored", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to --- Mails in database ---
        ///{0}.
        /// </summary>
        internal static string bot_mailer_cmd_getmails {
            get {
                return ResourceManager.GetString("bot.mailer.cmd.getmails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to See usage.
        /// </summary>
        internal static string bot_mailer_cmd_help {
            get {
                return ResourceManager.GetString("bot.mailer.cmd.help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Added {0} to the ignore list!.
        /// </summary>
        internal static string bot_mailer_cmd_ignore_added {
            get {
                return ResourceManager.GetString("bot.mailer.cmd.ignore.added", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing or invalid name. Usage: {0} &lt;username&gt;.
        /// </summary>
        internal static string bot_mailer_cmd_ignore_invalid {
            get {
                return ResourceManager.GetString("bot.mailer.cmd.ignore.invalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removed {0} from the ignore list!.
        /// </summary>
        internal static string bot_mailer_cmd_ignore_removed {
            get {
                return ResourceManager.GetString("bot.mailer.cmd.ignore.removed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creating new database file: {0}.
        /// </summary>
        internal static string bot_mailer_create_db {
            get {
                return ResourceManager.GetString("bot.mailer.create.db", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creating new ignore list: {0}.
        /// </summary>
        internal static string bot_mailer_create_ignore {
            get {
                return ResourceManager.GetString("bot.mailer.create.ignore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delivered: {0}.
        /// </summary>
        internal static string bot_mailer_delivered {
            get {
                return ResourceManager.GetString("bot.mailer.delivered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initializing Mailer with settings:.
        /// </summary>
        internal static string bot_mailer_init {
            get {
                return ResourceManager.GetString("bot.mailer.init", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  - Database File: {0}.
        /// </summary>
        internal static string bot_mailer_init_db {
            get {
                return ResourceManager.GetString("bot.mailer.init.db", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  - Max Database Size: {0}.
        /// </summary>
        internal static string bot_mailer_init_db_size {
            get {
                return ResourceManager.GetString("bot.mailer.init.db_size", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot enable Mailer: Max Database Size must be greater than zero. Please review the settings..
        /// </summary>
        internal static string bot_mailer_init_fail_db_size {
            get {
                return ResourceManager.GetString("bot.mailer.init_fail.db_size", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot enable Mailer: Mail Retention must be greater than zero. Please review the settings..
        /// </summary>
        internal static string bot_mailer_init_fail_mail_retention {
            get {
                return ResourceManager.GetString("bot.mailer.init_fail.mail_retention", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot enable Mailer: Max Mails per Player must be greater than zero. Please review the settings..
        /// </summary>
        internal static string bot_mailer_init_fail_max_mails {
            get {
                return ResourceManager.GetString("bot.mailer.init_fail.max_mails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  - Ignore List: {0}.
        /// </summary>
        internal static string bot_mailer_init_ignore {
            get {
                return ResourceManager.GetString("bot.mailer.init.ignore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  - Mail Retention: {0}.
        /// </summary>
        internal static string bot_mailer_init_mail_retention {
            get {
                return ResourceManager.GetString("bot.mailer.init.mail_retention", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  - Max Mails per Player: {0}.
        /// </summary>
        internal static string bot_mailer_init_max_mails {
            get {
                return ResourceManager.GetString("bot.mailer.init.max_mails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  - Public Interactions: {0}.
        /// </summary>
        internal static string bot_mailer_init_public {
            get {
                return ResourceManager.GetString("bot.mailer.init.public", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loading database file: {0}.
        /// </summary>
        internal static string bot_mailer_load_db {
            get {
                return ResourceManager.GetString("bot.mailer.load.db", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loading ignore list: .
        /// </summary>
        internal static string bot_mailer_load_ignore {
            get {
                return ResourceManager.GetString("bot.mailer.load.ignore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Looking for mails to send @ {0}.
        /// </summary>
        internal static string bot_mailer_process_mails {
            get {
                return ResourceManager.GetString("bot.mailer.process_mails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Saving message: {0}.
        /// </summary>
        internal static string bot_mailer_saving {
            get {
                return ResourceManager.GetString("bot.mailer.saving", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is ignored!.
        /// </summary>
        internal static string bot_mailer_user_ignored {
            get {
                return ResourceManager.GetString("bot.mailer.user_ignored", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Render maps (item maps).
        /// </summary>
        internal static string bot_map_cmd_desc {
            get {
                return ResourceManager.GetString("bot.map.cmd.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid ID provided, must be a number!.
        /// </summary>
        internal static string bot_map_cmd_invalid_id {
            get {
                return ResourceManager.GetString("bot.map.cmd.invalid_id", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A map with id &apos;{0}&apos; does not exists!.
        /// </summary>
        internal static string bot_map_cmd_not_found {
            get {
                return ResourceManager.GetString("bot.map.cmd.not_found", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to render the map with id: &apos;{0}&apos;.
        /// </summary>
        internal static string bot_map_failed_to_render {
            get {
                return ResourceManager.GetString("bot.map.failed_to_render", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to - Map id: {0} (Last Updated: {1}).
        /// </summary>
        internal static string bot_map_list_item {
            get {
                return ResourceManager.GetString("bot.map.list_item", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No maps received!.
        /// </summary>
        internal static string bot_map_no_maps {
            get {
                return ResourceManager.GetString("bot.map.no_maps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The list of received maps from the server:.
        /// </summary>
        internal static string bot_map_received {
            get {
                return ResourceManager.GetString("bot.map.received", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Received a new Map, with Id: {0}.
        /// </summary>
        internal static string bot_map_received_map {
            get {
                return ResourceManager.GetString("bot.map.received_map", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Succesfully rendered a map with id &apos;{0}&apos; to: &apos;{1}&apos;.
        /// </summary>
        internal static string bot_map_rendered {
            get {
                return ResourceManager.GetString("bot.map.rendered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resized the rendered image of the map with id: &apos;{0}&apos; to {1}x{1}..
        /// </summary>
        internal static string bot_map_resized_rendered_image {
            get {
                return ResourceManager.GetString("bot.map.resized_rendered_image", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size of the map is reduced from ({0}x{1}) to ({2}x{3}) due to the size limitation of the current terminal..
        /// </summary>
        internal static string bot_map_scale {
            get {
                return ResourceManager.GetString("bot.map.scale", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sent a rendered image of a map with an id &apos;{0}&apos; to the Discord via Discord Brdige chat bot!.
        /// </summary>
        internal static string bot_map_sent_to_discord {
            get {
                return ResourceManager.GetString("bot.map.sent_to_discord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sent a rendered image of a map with an id &apos;{0}&apos; to the Telegram via Telegram Bridge chat bot!.
        /// </summary>
        internal static string bot_map_sent_to_telegram {
            get {
                return ResourceManager.GetString("bot.map.sent_to_telegram", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to replay command.
        /// </summary>
        internal static string bot_replayCapture_cmd {
            get {
                return ResourceManager.GetString("bot.replayCapture.cmd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replay file created..
        /// </summary>
        internal static string bot_replayCapture_created {
            get {
                return ResourceManager.GetString("bot.replayCapture.created", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Record was stopped. Restart the program to start another record..
        /// </summary>
        internal static string bot_replayCapture_restart {
            get {
                return ResourceManager.GetString("bot.replayCapture.restart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Record stopped..
        /// </summary>
        internal static string bot_replayCapture_stopped {
            get {
                return ResourceManager.GetString("bot.replayCapture.stopped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Script &apos;{0}&apos; failed to run ({1})..
        /// </summary>
        internal static string bot_script_fail {
            get {
                return ResourceManager.GetString("bot.script.fail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File not found: &apos;{0}&apos;.
        /// </summary>
        internal static string bot_script_file_not_found {
            get {
                return ResourceManager.GetString("bot.script.file_not_found", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8[MCC] [{0}] Cannot find script file: {1}.
        /// </summary>
        internal static string bot_script_not_found {
            get {
                return ResourceManager.GetString("bot.script.not_found", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Script &apos;{0}&apos; loaded..
        /// </summary>
        internal static string bot_script_pm_loaded {
            get {
                return ResourceManager.GetString("bot.script.pm.loaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loaded task:
        ///{0}.
        /// </summary>
        internal static string bot_scriptScheduler_loaded_task {
            get {
                return ResourceManager.GetString("bot.scriptScheduler.loaded_task", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No action for task:
        ///{0}.
        /// </summary>
        internal static string bot_scriptScheduler_no_action {
            get {
                return ResourceManager.GetString("bot.scriptScheduler.no_action", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This task will never trigger:
        ///{0}.
        /// </summary>
        internal static string bot_scriptScheduler_no_trigger {
            get {
                return ResourceManager.GetString("bot.scriptScheduler.no_trigger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interval / Running action: {0}.
        /// </summary>
        internal static string bot_scriptScheduler_running_inverval {
            get {
                return ResourceManager.GetString("bot.scriptScheduler.running_inverval", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Login / Running action: {0}.
        /// </summary>
        internal static string bot_scriptScheduler_running_login {
            get {
                return ResourceManager.GetString("bot.scriptScheduler.running_login", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Time / Running action: {0}.
        /// </summary>
        internal static string bot_scriptScheduler_running_time {
            get {
                return ResourceManager.GetString("bot.scriptScheduler.running_time", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to triggeronfirstlogin: {0}
        /// triggeronlogin: {1}
        /// triggerontime: {2}
        /// triggeroninterval: {3}
        /// timevalue: {4}
        /// timeinterval: {5}
        /// action: {6}.
        /// </summary>
        internal static string bot_scriptScheduler_task {
            get {
                return ResourceManager.GetString("bot.scriptScheduler.task", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sending message to Telegram was canceled due an error occuring. For more info enable Debug..
        /// </summary>
        internal static string bot_TelegramBridge_canceled_sending {
            get {
                return ResourceManager.GetString("bot.TelegramBridge.canceled_sending", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command was executed with the result.
        /// </summary>
        internal static string bot_TelegramBridge_command_executed {
            get {
                return ResourceManager.GetString("bot.TelegramBridge.command_executed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Succesfully connected with the MCC!.
        /// </summary>
        internal static string bot_TelegramBridge_connected {
            get {
                return ResourceManager.GetString("bot.TelegramBridge.connected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command allows you to specify in the which direction the messages will be relayed via the Telegram Bridge chat bot..
        /// </summary>
        internal static string bot_TelegramBridge_desc {
            get {
                return ResourceManager.GetString("bot.TelegramBridge.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Direction of the Telegram Brdige has been switched to &apos;{0}&apos;!.
        /// </summary>
        internal static string bot_TelegramBridge_direction {
            get {
                return ResourceManager.GetString("bot.TelegramBridge.direction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Both.
        /// </summary>
        internal static string bot_TelegramBridge_direction_both {
            get {
                return ResourceManager.GetString("bot.TelegramBridge.direction.both", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Minecraft.
        /// </summary>
        internal static string bot_TelegramBridge_direction_minecraft {
            get {
                return ResourceManager.GetString("bot.TelegramBridge.direction.minecraft", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Telegram.
        /// </summary>
        internal static string bot_TelegramBridge_direction_Telegram {
            get {
                return ResourceManager.GetString("bot.TelegramBridge.direction.Telegram", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disconnected from from the MCC!.
        /// </summary>
        internal static string bot_TelegramBridge_disconnected {
            get {
                return ResourceManager.GetString("bot.TelegramBridge.disconnected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid direction provided! Available directions: both|b, minecraft|mc, telegram|tg|t. Example: &quot;tgbridge direction mc&quot;.
        /// </summary>
        internal static string bot_TelegramBridge_invalid_direction {
            get {
                return ResourceManager.GetString("bot.TelegramBridge.invalid_direction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [WARNING] You have not provided any Channel IDs, for &quot;Authorized_Chat_Ids&quot; field, anyone who finds your bot will be able to send messages and commands to it!.
        /// </summary>
        internal static string bot_TelegramBridge_missing_authorized_channels {
            get {
                return ResourceManager.GetString("bot.TelegramBridge.missing_authorized_channels", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [WARNING] You have not provided a Channel ID, you will ONLY get replies to commands sent from Telegram!.
        /// </summary>
        internal static string bot_TelegramBridge_missing_channel_id {
            get {
                return ResourceManager.GetString("bot.TelegramBridge.missing_channel_id", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please provide a valid bot token!.
        /// </summary>
        internal static string bot_TelegramBridge_missing_token {
            get {
                return ResourceManager.GetString("bot.TelegramBridge.missing_token", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to **🛑 Unauthorized access! 🛑
        ///
        ///Add the ID of this chat to &quot;Authorized_Chat_Ids&quot; field in the configuration file to gain access!**.
        /// </summary>
        internal static string bot_TelegramBridge_unauthorized {
            get {
                return ResourceManager.GetString("bot.TelegramBridge.unauthorized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unknown error has occured!.
        /// </summary>
        internal static string bot_TelegramBridge_unknown_error {
            get {
                return ResourceManager.GetString("bot.TelegramBridge.unknown_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bot: {0} said : {1}.
        /// </summary>
        internal static string bot_testBot_said {
            get {
                return ResourceManager.GetString("bot.testBot.said", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bot: {0} told me : {1}.
        /// </summary>
        internal static string bot_testBot_told {
            get {
                return ResourceManager.GetString("bot.testBot.told", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Alerts.
        /// </summary>
        internal static string botname_Alerts {
            get {
                return ResourceManager.GetString("botname.Alerts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AntiAFK.
        /// </summary>
        internal static string botname_AntiAFK {
            get {
                return ResourceManager.GetString("botname.AntiAFK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AutoAttack.
        /// </summary>
        internal static string botname_AutoAttack {
            get {
                return ResourceManager.GetString("botname.AutoAttack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AutoCraft.
        /// </summary>
        internal static string botname_AutoCraft {
            get {
                return ResourceManager.GetString("botname.AutoCraft", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AutoDig.
        /// </summary>
        internal static string botname_AutoDig {
            get {
                return ResourceManager.GetString("botname.AutoDig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AutoDrop.
        /// </summary>
        internal static string botname_AutoDrop {
            get {
                return ResourceManager.GetString("botname.AutoDrop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AutoEat.
        /// </summary>
        internal static string botname_AutoEat {
            get {
                return ResourceManager.GetString("botname.AutoEat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AutoFishing.
        /// </summary>
        internal static string botname_AutoFishing {
            get {
                return ResourceManager.GetString("botname.AutoFishing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AutoRelog.
        /// </summary>
        internal static string botname_AutoRelog {
            get {
                return ResourceManager.GetString("botname.AutoRelog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AutoRespond.
        /// </summary>
        internal static string botname_AutoRespond {
            get {
                return ResourceManager.GetString("botname.AutoRespond", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ChatLog.
        /// </summary>
        internal static string botname_ChatLog {
            get {
                return ResourceManager.GetString("botname.ChatLog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DiscordBridge.
        /// </summary>
        internal static string botname_DiscordBridge {
            get {
                return ResourceManager.GetString("botname.DiscordBridge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Farmer.
        /// </summary>
        internal static string botname_Farmer {
            get {
                return ResourceManager.GetString("botname.Farmer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FollowPlayer.
        /// </summary>
        internal static string botname_FollowPlayer {
            get {
                return ResourceManager.GetString("botname.FollowPlayer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HangmanGame.
        /// </summary>
        internal static string botname_HangmanGame {
            get {
                return ResourceManager.GetString("botname.HangmanGame", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mailer.
        /// </summary>
        internal static string botname_Mailer {
            get {
                return ResourceManager.GetString("botname.Mailer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Map.
        /// </summary>
        internal static string botname_Map {
            get {
                return ResourceManager.GetString("botname.Map", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PlayerListLogger.
        /// </summary>
        internal static string botname_PlayerListLogger {
            get {
                return ResourceManager.GetString("botname.PlayerListLogger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RemoteControl.
        /// </summary>
        internal static string botname_RemoteControl {
            get {
                return ResourceManager.GetString("botname.RemoteControl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ReplayCapture.
        /// </summary>
        internal static string botname_ReplayCapture {
            get {
                return ResourceManager.GetString("botname.ReplayCapture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Script.
        /// </summary>
        internal static string botname_Script {
            get {
                return ResourceManager.GetString("botname.Script", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ScriptScheduler.
        /// </summary>
        internal static string botname_ScriptScheduler {
            get {
                return ResourceManager.GetString("botname.ScriptScheduler", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TelegramBridge.
        /// </summary>
        internal static string botname_TelegramBridge {
            get {
                return ResourceManager.GetString("botname.TelegramBridge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TestBot.
        /// </summary>
        internal static string botname_TestBot {
            get {
                return ResourceManager.GetString("botname.TestBot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Converting session cache from disk: {0}.
        /// </summary>
        internal static string cache_converting {
            get {
                return ResourceManager.GetString("cache.converting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Ignoring invalid session token line: {0}.
        /// </summary>
        internal static string cache_ignore_line {
            get {
                return ResourceManager.GetString("cache.ignore_line", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Ignoring invalid profile key token line: {0}.
        /// </summary>
        internal static string cache_ignore_line_keys {
            get {
                return ResourceManager.GetString("cache.ignore_line_keys", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Ignoring session token string &apos;{0}&apos;: {1}.
        /// </summary>
        internal static string cache_ignore_string {
            get {
                return ResourceManager.GetString("cache.ignore_string", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Ignoring profile key token string &apos;{0}&apos;: {1}.
        /// </summary>
        internal static string cache_ignore_string_keys {
            get {
                return ResourceManager.GetString("cache.ignore_string_keys", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Loaded session: {0}:{1}.
        /// </summary>
        internal static string cache_loaded {
            get {
                return ResourceManager.GetString("cache.loaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Loaded profile key, it will be refresh at {0}.
        /// </summary>
        internal static string cache_loaded_keys {
            get {
                return ResourceManager.GetString("cache.loaded_keys", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Loading Minecraft profiles: {0}.
        /// </summary>
        internal static string cache_loading {
            get {
                return ResourceManager.GetString("cache.loading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Loading profile key cache from disk: {0}.
        /// </summary>
        internal static string cache_loading_keys {
            get {
                return ResourceManager.GetString("cache.loading_keys", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Loading session cache from disk: {0}.
        /// </summary>
        internal static string cache_loading_session {
            get {
                return ResourceManager.GetString("cache.loading_session", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Got malformed data while reading serialized session cache from disk: {0}.
        /// </summary>
        internal static string cache_malformed {
            get {
                return ResourceManager.GetString("cache.malformed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Failed to read serialized session cache from disk: {0}.
        /// </summary>
        internal static string cache_read_fail {
            get {
                return ResourceManager.GetString("cache.read_fail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Failed to read session cache from disk: {0}.
        /// </summary>
        internal static string cache_read_fail_plain {
            get {
                return ResourceManager.GetString("cache.read_fail_plain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Failed to read profile key cache from disk: {0}.
        /// </summary>
        internal static string cache_read_fail_plain_keys {
            get {
                return ResourceManager.GetString("cache.read_fail_plain_keys", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Failed to write session cache to disk: {0}.
        /// </summary>
        internal static string cache_save_fail {
            get {
                return ResourceManager.GetString("cache.save_fail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Failed to write profile key cache to disk: {0}.
        /// </summary>
        internal static string cache_save_fail_keys {
            get {
                return ResourceManager.GetString("cache.save_fail_keys", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Saving session cache to disk.
        /// </summary>
        internal static string cache_saving {
            get {
                return ResourceManager.GetString("cache.saving", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Saving profile key cache to disk.
        /// </summary>
        internal static string cache_saving_keys {
            get {
                return ResourceManager.GetString("cache.saving_keys", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Done. File saved as &apos;{0}&apos;.
        /// </summary>
        internal static string chat_done {
            get {
                return ResourceManager.GetString("chat.done", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Downloading &apos;{0}.lang&apos; from Mojang servers....
        /// </summary>
        internal static string chat_download {
            get {
                return ResourceManager.GetString("chat.download", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Failed to download the file..
        /// </summary>
        internal static string chat_fail {
            get {
                return ResourceManager.GetString("chat.fail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Defaulting to en_GB.lang from your Minecraft directory..
        /// </summary>
        internal static string chat_from_dir {
            get {
                return ResourceManager.GetString("chat.from_dir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Translations file loaded..
        /// </summary>
        internal static string chat_loaded {
            get {
                return ResourceManager.GetString("chat.loaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Player {0}&apos;s message chain is broken!.
        /// </summary>
        internal static string chat_message_chain_broken {
            get {
                return ResourceManager.GetString("chat.message_chain_broken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Translations file not found: &apos;{0}&apos;
        ///Some messages won&apos;t be properly printed without this file..
        /// </summary>
        internal static string chat_not_found {
            get {
                return ResourceManager.GetString("chat.not_found", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Performing request to {0}.
        /// </summary>
        internal static string chat_request {
            get {
                return ResourceManager.GetString("chat.request", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [{0}] Disconnecting and Reconnecting to the Server.
        /// </summary>
        internal static string chatbot_reconnect {
            get {
                return ResourceManager.GetString("chatbot.reconnect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Swing your arm..
        /// </summary>
        internal static string cmd_animation_desc {
            get {
                return ResourceManager.GetString("cmd.animation.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find a bed!.
        /// </summary>
        internal static string cmd_bed_bed_not_found {
            get {
                return ResourceManager.GetString("cmd.bed.bed_not_found", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can not reach the bed safely!.
        /// </summary>
        internal static string cmd_bed_cant_reach_safely {
            get {
                return ResourceManager.GetString("cmd.bed.cant_reach_safely", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used to sleep in or leave a bed..
        /// </summary>
        internal static string cmd_bed_desc {
            get {
                return ResourceManager.GetString("cmd.bed.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to reach the bed position (X: {0:0.0}, Y: {1:0.0}, Z: {2:0.0}) in time (30 seconds). Giving up!.
        /// </summary>
        internal static string cmd_bed_failed_to_reach_in_time {
            get {
                return ResourceManager.GetString("cmd.bed.failed_to_reach_in_time", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found a bet at (X: {0:0.0}, Y: {1:0.0}, Z: {2:0.0})..
        /// </summary>
        internal static string cmd_bed_found_a_bed_at {
            get {
                return ResourceManager.GetString("cmd.bed.found_a_bed_at", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Succesfully laid in bed!.
        /// </summary>
        internal static string cmd_bed_in {
            get {
                return ResourceManager.GetString("cmd.bed.in", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sending a command to leave a bed to the server..
        /// </summary>
        internal static string cmd_bed_leaving {
            get {
                return ResourceManager.GetString("cmd.bed.leaving", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moving to (X: {0:0.0}, Y: {1:0.0}, Z: {2:0.0}) where the bed is located..
        /// </summary>
        internal static string cmd_bed_moving {
            get {
                return ResourceManager.GetString("cmd.bed.moving", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The block on (X: {0:0.0}, Y: {1:0.0}, Z: {2:0.0}) is not a bed!.
        /// </summary>
        internal static string cmd_bed_not_a_bed {
            get {
                return ResourceManager.GetString("cmd.bed.not_a_bed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not lay in bed. Are you trying to sleep in a bed? (PS: You must use the head block coordinates of the bed).
        /// </summary>
        internal static string cmd_bed_not_in {
            get {
                return ResourceManager.GetString("cmd.bed.not_in", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Searching for a bed in radius of {0}....
        /// </summary>
        internal static string cmd_bed_searching {
            get {
                return ResourceManager.GetString("cmd.bed.searching", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trying to sleep in a bed on location (X: {0:0.0}, Y: {1:0.0}, Z: {2:0.0}). Result: {3}.
        /// </summary>
        internal static string cmd_bed_trying_to_use {
            get {
                return ResourceManager.GetString("cmd.bed.trying_to_use", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Blocks around.
        /// </summary>
        internal static string cmd_blockinfo_BlocksAround {
            get {
                return ResourceManager.GetString("cmd.blockinfo.BlocksAround", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Block type.
        /// </summary>
        internal static string cmd_blockinfo_BlockType {
            get {
                return ResourceManager.GetString("cmd.blockinfo.BlockType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reports the type of the block on the provided coordinates. (Use -s to report blocks around the target block)..
        /// </summary>
        internal static string cmd_blockinfo_desc {
            get {
                return ResourceManager.GetString("cmd.blockinfo.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Negative.
        /// </summary>
        internal static string cmd_blockinfo_Negative {
            get {
                return ResourceManager.GetString("cmd.blockinfo.Negative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Positive.
        /// </summary>
        internal static string cmd_blockinfo_Positive {
            get {
                return ResourceManager.GetString("cmd.blockinfo.Positive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List bots, unload a bot or all bots..
        /// </summary>
        internal static string cmd_bots_desc {
            get {
                return ResourceManager.GetString("cmd.bots.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loaded bots.
        /// </summary>
        internal static string cmd_bots_list {
            get {
                return ResourceManager.GetString("cmd.bots.list", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No bots loaded!.
        /// </summary>
        internal static string cmd_bots_noloaded {
            get {
                return ResourceManager.GetString("cmd.bots.noloaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bot {0} is not loaded, check if you have made a typo!.
        /// </summary>
        internal static string cmd_bots_notfound {
            get {
                return ResourceManager.GetString("cmd.bots.notfound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Successfully unloaded bot: {0}.
        /// </summary>
        internal static string cmd_bots_unloaded {
            get {
                return ResourceManager.GetString("cmd.bots.unloaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Successfully unloaded all bots!.
        /// </summary>
        internal static string cmd_bots_unloaded_all {
            get {
                return ResourceManager.GetString("cmd.bots.unloaded_all", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Changed to slot {0}.
        /// </summary>
        internal static string cmd_changeSlot_changed {
            get {
                return ResourceManager.GetString("cmd.changeSlot.changed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change slot in hotbar.
        /// </summary>
        internal static string cmd_changeSlot_desc {
            get {
                return ResourceManager.GetString("cmd.changeSlot.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not change slot.
        /// </summary>
        internal static string cmd_changeSlot_fail {
            get {
                return ResourceManager.GetString("cmd.changeSlot.fail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not change slot: Not a Number.
        /// </summary>
        internal static string cmd_changeSlot_nan {
            get {
                return ResourceManager.GetString("cmd.changeSlot.nan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to chunk: ({0}, {1})..
        /// </summary>
        internal static string cmd_chunk_chunk_pos {
            get {
                return ResourceManager.GetString("cmd.chunk.chunk_pos", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Current location：{0}, chunk: ({1}, {2})..
        /// </summary>
        internal static string cmd_chunk_current {
            get {
                return ResourceManager.GetString("cmd.chunk.current", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Displays the chunk loading status.
        ///Change EnableEmoji=false in the settings if the display is confusing..
        /// </summary>
        internal static string cmd_chunk_desc {
            get {
                return ResourceManager.GetString("cmd.chunk.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §x§0This command is used for debugging, make sure you know what you are doing.§r.
        /// </summary>
        internal static string cmd_chunk_for_debug {
            get {
                return ResourceManager.GetString("cmd.chunk.for_debug", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Player:{0}, MarkedChunk:{1}, NotReceived:{2}, Loading:{3}, Loaded:{4}.
        /// </summary>
        internal static string cmd_chunk_icon {
            get {
                return ResourceManager.GetString("cmd.chunk.icon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Marked location: .
        /// </summary>
        internal static string cmd_chunk_marked {
            get {
                return ResourceManager.GetString("cmd.chunk.marked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §x§0Since the marked chunk is outside the graph, it will not be displayed!§r.
        /// </summary>
        internal static string cmd_chunk_outside {
            get {
                return ResourceManager.GetString("cmd.chunk.outside", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to connect to the specified server..
        /// </summary>
        internal static string cmd_connect_desc {
            get {
                return ResourceManager.GetString("cmd.connect.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid server IP &apos;{0}&apos;..
        /// </summary>
        internal static string cmd_connect_invalid_ip {
            get {
                return ResourceManager.GetString("cmd.connect.invalid_ip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown account &apos;{0}&apos;..
        /// </summary>
        internal static string cmd_connect_unknown {
            get {
                return ResourceManager.GetString("cmd.connect.unknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to toggle debug messages..
        /// </summary>
        internal static string cmd_debug_desc {
            get {
                return ResourceManager.GetString("cmd.debug.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug messages are now OFF.
        /// </summary>
        internal static string cmd_debug_state_off {
            get {
                return ResourceManager.GetString("cmd.debug.state_off", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug messages are now ON.
        /// </summary>
        internal static string cmd_debug_state_on {
            get {
                return ResourceManager.GetString("cmd.debug.state_on", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempt to break a block.
        /// </summary>
        internal static string cmd_dig_desc {
            get {
                return ResourceManager.GetString("cmd.dig.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempting to dig block at {0} {1} {2} ({3}).
        /// </summary>
        internal static string cmd_dig_dig {
            get {
                return ResourceManager.GetString("cmd.dig.dig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to start digging block..
        /// </summary>
        internal static string cmd_dig_fail {
            get {
                return ResourceManager.GetString("cmd.dig.fail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No block at this location (Air).
        /// </summary>
        internal static string cmd_dig_no_block {
            get {
                return ResourceManager.GetString("cmd.dig.no_block", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You are too far away from this block..
        /// </summary>
        internal static string cmd_dig_too_far {
            get {
                return ResourceManager.GetString("cmd.dig.too_far", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Drop specified type of items from player inventory or opened container.
        /// </summary>
        internal static string cmd_dropItem_desc {
            get {
                return ResourceManager.GetString("cmd.dropItem.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dropped all {0} from inventory #{1}.
        /// </summary>
        internal static string cmd_dropItem_dropped {
            get {
                return ResourceManager.GetString("cmd.dropItem.dropped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown item {0}.
        /// </summary>
        internal static string cmd_dropItem_unknown_item {
            get {
                return ResourceManager.GetString("cmd.dropItem.unknown_item", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sent a click to the server, if you have enough levels and if you have placed the items in the correct slots it should enchant!.
        /// </summary>
        internal static string cmd_enchant_clicked {
            get {
                return ResourceManager.GetString("cmd.enchant.clicked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enchant an item when you have the Enchantment table opened and the list of enchants recieved..
        /// </summary>
        internal static string cmd_enchant_desc {
            get {
                return ResourceManager.GetString("cmd.enchant.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must put an item inside the enchanting table in slot 0!.
        /// </summary>
        internal static string cmd_enchant_enchanting_no_item {
            get {
                return ResourceManager.GetString("cmd.enchant.enchanting_no_item", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must put at least 3 lapis lazuli inside the enchanting table in slot 1!.
        /// </summary>
        internal static string cmd_enchant_enchanting_no_lapis {
            get {
                return ResourceManager.GetString("cmd.enchant.enchanting_no_lapis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must open a an enchanting table in order to use this option!.
        /// </summary>
        internal static string cmd_enchant_enchanting_table_not_opened {
            get {
                return ResourceManager.GetString("cmd.enchant.enchanting_table_not_opened", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid slot provided (Available: top, middle, bottom)!.
        /// </summary>
        internal static string cmd_enchant_invalid_slot {
            get {
                return ResourceManager.GetString("cmd.enchant.invalid_slot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must first put an item to enchant to the enchanting table in order to get enchantments from the server, then you can execute this command!.
        /// </summary>
        internal static string cmd_enchant_no_enchantments {
            get {
                return ResourceManager.GetString("cmd.enchant.no_enchantments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You do not have enouhg levels to enchant! (Your current level is {0}, you need to be level {1})..
        /// </summary>
        internal static string cmd_enchant_no_levels {
            get {
                return ResourceManager.GetString("cmd.enchant.no_levels", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not click!.
        /// </summary>
        internal static string cmd_enchant_not_clicked {
            get {
                return ResourceManager.GetString("cmd.enchant.not_clicked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Entity attacked.
        /// </summary>
        internal static string cmd_entityCmd_attacked {
            get {
                return ResourceManager.GetString("cmd.entityCmd.attacked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Boots.
        /// </summary>
        internal static string cmd_entityCmd_boots {
            get {
                return ResourceManager.GetString("cmd.entityCmd.boots", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Chestplate.
        /// </summary>
        internal static string cmd_entityCmd_chestplate {
            get {
                return ResourceManager.GetString("cmd.entityCmd.chestplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom Name.
        /// </summary>
        internal static string cmd_entityCmd_customname {
            get {
                return ResourceManager.GetString("cmd.entityCmd.customname", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Distance.
        /// </summary>
        internal static string cmd_entityCmd_distance {
            get {
                return ResourceManager.GetString("cmd.entityCmd.distance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Entities.
        /// </summary>
        internal static string cmd_entityCmd_entities {
            get {
                return ResourceManager.GetString("cmd.entityCmd.entities", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Entity.
        /// </summary>
        internal static string cmd_entityCmd_entity {
            get {
                return ResourceManager.GetString("cmd.entityCmd.entity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Equipment.
        /// </summary>
        internal static string cmd_entityCmd_equipment {
            get {
                return ResourceManager.GetString("cmd.entityCmd.equipment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Health.
        /// </summary>
        internal static string cmd_entityCmd_health {
            get {
                return ResourceManager.GetString("cmd.entityCmd.health", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Helmet.
        /// </summary>
        internal static string cmd_entityCmd_helmet {
            get {
                return ResourceManager.GetString("cmd.entityCmd.helmet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Item.
        /// </summary>
        internal static string cmd_entityCmd_item {
            get {
                return ResourceManager.GetString("cmd.entityCmd.item", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Latency.
        /// </summary>
        internal static string cmd_entityCmd_latency {
            get {
                return ResourceManager.GetString("cmd.entityCmd.latency", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Leggings.
        /// </summary>
        internal static string cmd_entityCmd_leggings {
            get {
                return ResourceManager.GetString("cmd.entityCmd.leggings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Location.
        /// </summary>
        internal static string cmd_entityCmd_location {
            get {
                return ResourceManager.GetString("cmd.entityCmd.location", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Main Hand.
        /// </summary>
        internal static string cmd_entityCmd_mainhand {
            get {
                return ResourceManager.GetString("cmd.entityCmd.mainhand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nickname.
        /// </summary>
        internal static string cmd_entityCmd_nickname {
            get {
                return ResourceManager.GetString("cmd.entityCmd.nickname", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Entity not found.
        /// </summary>
        internal static string cmd_entityCmd_not_found {
            get {
                return ResourceManager.GetString("cmd.entityCmd.not_found", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Off Hand.
        /// </summary>
        internal static string cmd_entityCmd_offhand {
            get {
                return ResourceManager.GetString("cmd.entityCmd.offhand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pose.
        /// </summary>
        internal static string cmd_entityCmd_pose {
            get {
                return ResourceManager.GetString("cmd.entityCmd.pose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type.
        /// </summary>
        internal static string cmd_entityCmd_type {
            get {
                return ResourceManager.GetString("cmd.entityCmd.type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Entity used.
        /// </summary>
        internal static string cmd_entityCmd_used {
            get {
                return ResourceManager.GetString("cmd.entityCmd.used", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allows you to execute a command if a condition is met. (You can use variables from MinecraftClient.ini and /set command, as well as CSharp expressions).
        /// </summary>
        internal static string cmd_execif_desc {
            get {
                return ResourceManager.GetString("cmd.execif.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error: {0}.
        /// </summary>
        internal static string cmd_execif_error {
            get {
                return ResourceManager.GetString("cmd.execif.error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error has occured while executing the command: {0}.
        /// </summary>
        internal static string cmd_execif_error_occured {
            get {
                return ResourceManager.GetString("cmd.execif.error_occured", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The condition &apos;{0}&apos; was met, executed command &apos;{1}&apos; with result &apos;{2}&apos;..
        /// </summary>
        internal static string cmd_execif_executed {
            get {
                return ResourceManager.GetString("cmd.execif.executed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The condition &apos;{0}&apos; was met, executed command &apos;{1}&apos;, no result was returned..
        /// </summary>
        internal static string cmd_execif_executed_no_output {
            get {
                return ResourceManager.GetString("cmd.execif.executed_no_output", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Execute multiple commands one after another.
        /// </summary>
        internal static string cmd_execmulti_desc {
            get {
                return ResourceManager.GetString("cmd.execmulti.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Executed the command &apos;{0}&apos; with {1}.
        /// </summary>
        internal static string cmd_execmulti_executed {
            get {
                return ResourceManager.GetString("cmd.execmulti.executed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to no result!.
        /// </summary>
        internal static string cmd_execmulti_no_result {
            get {
                return ResourceManager.GetString("cmd.execmulti.no_result", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can not use execmulti or execif within execmulti command!.
        /// </summary>
        internal static string cmd_execmulti_prevent {
            get {
                return ResourceManager.GetString("cmd.execmulti.prevent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to result &apos;{0}&apos;!.
        /// </summary>
        internal static string cmd_execmulti_result {
            get {
                return ResourceManager.GetString("cmd.execmulti.result", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to disconnect from the server..
        /// </summary>
        internal static string cmd_exit_desc {
            get {
                return ResourceManager.GetString("cmd.exit.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Already following {0}!.
        /// </summary>
        internal static string cmd_follow_already_following {
            get {
                return ResourceManager.GetString("cmd.follow.already_following", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Already stopped.
        /// </summary>
        internal static string cmd_follow_already_stopped {
            get {
                return ResourceManager.GetString("cmd.follow.already_stopped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can not reach the player, he is either in chunks that are not loaded, too far away or not reachable by a bot due to obstacles like gaps or water bodies!.
        /// </summary>
        internal static string cmd_follow_cant_reach_player {
            get {
                return ResourceManager.GetString("cmd.follow.cant_reach_player", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Makes the bot follow a specified player.
        /// </summary>
        internal static string cmd_follow_desc {
            get {
                return ResourceManager.GetString("cmd.follow.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid or empty player name provided!.
        /// </summary>
        internal static string cmd_follow_invalid_name {
            get {
                return ResourceManager.GetString("cmd.follow.invalid_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified player is either not connected out out of the range!.
        /// </summary>
        internal static string cmd_follow_invalid_player {
            get {
                return ResourceManager.GetString("cmd.follow.invalid_player", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NOTE: The bot is quite slow, you need to walk slowly and at a close distance for it to be able to keep up, kinda like when you make animals follow you by holding food in your hand. This is a limitation due to a pathfinding algorithm, we are working to get a better one..
        /// </summary>
        internal static string cmd_follow_note {
            get {
                return ResourceManager.GetString("cmd.follow.note", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pausing!.
        /// </summary>
        internal static string cmd_follow_pausing {
            get {
                return ResourceManager.GetString("cmd.follow.pausing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The player {0} came back to the range!.
        /// </summary>
        internal static string cmd_follow_player_came_to_the_range {
            get {
                return ResourceManager.GetString("cmd.follow.player_came_to_the_range", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The player {0} left the server!.
        /// </summary>
        internal static string cmd_follow_player_left {
            get {
                return ResourceManager.GetString("cmd.follow.player_left", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The player {0} has left the range!.
        /// </summary>
        internal static string cmd_follow_player_left_the_range {
            get {
                return ResourceManager.GetString("cmd.follow.player_left_the_range", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resuming to follow!.
        /// </summary>
        internal static string cmd_follow_resuming {
            get {
                return ResourceManager.GetString("cmd.follow.resuming", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Started following {0}!.
        /// </summary>
        internal static string cmd_follow_started {
            get {
                return ResourceManager.GetString("cmd.follow.started", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stopped!.
        /// </summary>
        internal static string cmd_follow_stopped {
            get {
                return ResourceManager.GetString("cmd.follow.stopped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stopped following!.
        /// </summary>
        internal static string cmd_follow_stopping {
            get {
                return ResourceManager.GetString("cmd.follow.stopping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switched to following {0}!.
        /// </summary>
        internal static string cmd_follow_switched {
            get {
                return ResourceManager.GetString("cmd.follow.switched", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enabled us-safe walking (NOTE: The bot might die or get hurt!).
        /// </summary>
        internal static string cmd_follow_unsafe_enabled {
            get {
                return ResourceManager.GetString("cmd.follow.unsafe_enabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to follow &lt;player name|stop&gt; [-f] (Use -f to enable un-safe walking).
        /// </summary>
        internal static string cmd_follow_usage {
            get {
                return ResourceManager.GetString("cmd.follow.usage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display Health and Food saturation..
        /// </summary>
        internal static string cmd_health_desc {
            get {
                return ResourceManager.GetString("cmd.health.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Health: {0}, Saturation: {1}, Level: {2}, TotalExperience: {3}.
        /// </summary>
        internal static string cmd_health_response {
            get {
                return ResourceManager.GetString("cmd.health.response", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} clicking slot {1} in window #{2}.
        /// </summary>
        internal static string cmd_inventory_clicking {
            get {
                return ResourceManager.GetString("cmd.inventory.clicking", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Closing Inventoy #{0}.
        /// </summary>
        internal static string cmd_inventory_close {
            get {
                return ResourceManager.GetString("cmd.inventory.close", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to close Inventory #{0}.
        /// </summary>
        internal static string cmd_inventory_close_fail {
            get {
                return ResourceManager.GetString("cmd.inventory.close_fail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find container, please retry with explicit ID.
        /// </summary>
        internal static string cmd_inventory_container_not_found {
            get {
                return ResourceManager.GetString("cmd.inventory.container_not_found", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Requested to clear slot #{0}.
        /// </summary>
        internal static string cmd_inventory_creative_delete {
            get {
                return ResourceManager.GetString("cmd.inventory.creative_delete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Requested {0} x{1} in slot #{2}.
        /// </summary>
        internal static string cmd_inventory_creative_done {
            get {
                return ResourceManager.GetString("cmd.inventory.creative_done", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to request Creative action.
        /// </summary>
        internal static string cmd_inventory_creative_fail {
            get {
                return ResourceManager.GetString("cmd.inventory.creative_fail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Damage.
        /// </summary>
        internal static string cmd_inventory_damage {
            get {
                return ResourceManager.GetString("cmd.inventory.damage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inventory command.
        /// </summary>
        internal static string cmd_inventory_desc {
            get {
                return ResourceManager.GetString("cmd.inventory.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dropped 1 item from slot #{0}.
        /// </summary>
        internal static string cmd_inventory_drop {
            get {
                return ResourceManager.GetString("cmd.inventory.drop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dropped whole item stack from slot #{0}.
        /// </summary>
        internal static string cmd_inventory_drop_stack {
            get {
                return ResourceManager.GetString("cmd.inventory.drop_stack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found items.
        /// </summary>
        internal static string cmd_inventory_found_items {
            get {
                return ResourceManager.GetString("cmd.inventory.found_items", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Available actions.
        /// </summary>
        internal static string cmd_inventory_help_available {
            get {
                return ResourceManager.GetString("cmd.inventory.help.available", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Basic usage.
        /// </summary>
        internal static string cmd_inventory_help_basic {
            get {
                return ResourceManager.GetString("cmd.inventory.help.basic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Click on an item..
        /// </summary>
        internal static string cmd_inventory_help_click {
            get {
                return ResourceManager.GetString("cmd.inventory.help.click", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close an opened container..
        /// </summary>
        internal static string cmd_inventory_help_close {
            get {
                return ResourceManager.GetString("cmd.inventory.help.close", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clear slot in creative mode..
        /// </summary>
        internal static string cmd_inventory_help_creativedelete {
            get {
                return ResourceManager.GetString("cmd.inventory.help.creativedelete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Give item in creative mode..
        /// </summary>
        internal static string cmd_inventory_help_creativegive {
            get {
                return ResourceManager.GetString("cmd.inventory.help.creativegive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Drop an item from inventory..
        /// </summary>
        internal static string cmd_inventory_help_drop {
            get {
                return ResourceManager.GetString("cmd.inventory.help.drop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}
        ///Use &apos;/inventory help &lt;action&gt;&apos; for action help.
        ///&apos;player&apos; and &apos;container&apos; can be simplified to &apos;p&apos; and &apos;c&apos;.
        ///Note that parameters in &apos;[]&apos; are optional..
        /// </summary>
        internal static string cmd_inventory_help_help {
            get {
                return ResourceManager.GetString("cmd.inventory.help.help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List avaliable inventories.
        /// </summary>
        internal static string cmd_inventory_help_inventories {
            get {
                return ResourceManager.GetString("cmd.inventory.help.inventories", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List your inventory..
        /// </summary>
        internal static string cmd_inventory_help_list {
            get {
                return ResourceManager.GetString("cmd.inventory.help.list", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Search for an item in avaliable Inventories.
        /// </summary>
        internal static string cmd_inventory_help_search {
            get {
                return ResourceManager.GetString("cmd.inventory.help.search", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shift click an item..
        /// </summary>
        internal static string cmd_inventory_help_shiftclick {
            get {
                return ResourceManager.GetString("cmd.inventory.help.shiftclick", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown action. .
        /// </summary>
        internal static string cmd_inventory_help_unknown {
            get {
                return ResourceManager.GetString("cmd.inventory.help.unknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage.
        /// </summary>
        internal static string cmd_inventory_help_usage {
            get {
                return ResourceManager.GetString("cmd.inventory.help.usage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your selected hotbar is {0}.
        /// </summary>
        internal static string cmd_inventory_hotbar {
            get {
                return ResourceManager.GetString("cmd.inventory.hotbar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inventories.
        /// </summary>
        internal static string cmd_inventory_inventories {
            get {
                return ResourceManager.GetString("cmd.inventory.inventories", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Available Inventories.
        /// </summary>
        internal static string cmd_inventory_inventories_available {
            get {
                return ResourceManager.GetString("cmd.inventory.inventories_available", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inventory.
        /// </summary>
        internal static string cmd_inventory_inventory {
            get {
                return ResourceManager.GetString("cmd.inventory.inventory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Left.
        /// </summary>
        internal static string cmd_inventory_left {
            get {
                return ResourceManager.GetString("cmd.inventory.left", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Middle.
        /// </summary>
        internal static string cmd_inventory_middle {
            get {
                return ResourceManager.GetString("cmd.inventory.middle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must be in Creative gamemode.
        /// </summary>
        internal static string cmd_inventory_need_creative {
            get {
                return ResourceManager.GetString("cmd.inventory.need_creative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find the specified item in any of avaliable Inventories!.
        /// </summary>
        internal static string cmd_inventory_no_found_items {
            get {
                return ResourceManager.GetString("cmd.inventory.no_found_items", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No item in slot #{0}.
        /// </summary>
        internal static string cmd_inventory_no_item {
            get {
                return ResourceManager.GetString("cmd.inventory.no_item", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inventory #{0} do not exist.
        /// </summary>
        internal static string cmd_inventory_not_exist {
            get {
                return ResourceManager.GetString("cmd.inventory.not_exist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Right.
        /// </summary>
        internal static string cmd_inventory_right {
            get {
                return ResourceManager.GetString("cmd.inventory.right", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shift clicking slot {0} in window #{1}.
        /// </summary>
        internal static string cmd_inventory_shiftclick {
            get {
                return ResourceManager.GetString("cmd.inventory.shiftclick", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shift click failed, this may be because this container type is not supported.
        /// </summary>
        internal static string cmd_inventory_shiftclick_fail {
            get {
                return ResourceManager.GetString("cmd.inventory.shiftclick_fail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to get the player list..
        /// </summary>
        internal static string cmd_list_desc {
            get {
                return ResourceManager.GetString("cmd.list.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PlayerList: {0}.
        /// </summary>
        internal static string cmd_list_players {
            get {
                return ResourceManager.GetString("cmd.list.players", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to log some text to the console..
        /// </summary>
        internal static string cmd_log_desc {
            get {
                return ResourceManager.GetString("cmd.log.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Looking at yaw: {0} pitch: {1}.
        /// </summary>
        internal static string cmd_look_at {
            get {
                return ResourceManager.GetString("cmd.look.at", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Looking at {0}.
        /// </summary>
        internal static string cmd_look_block {
            get {
                return ResourceManager.GetString("cmd.look.block", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to look at direction or coordinates..
        /// </summary>
        internal static string cmd_look_desc {
            get {
                return ResourceManager.GetString("cmd.look.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The block currently intersecting the line of sight is {0} ({1:0}, {2:0}, {3:0}), distance is {4:0.0}({5:0.0})..
        /// </summary>
        internal static string cmd_look_inspection {
            get {
                return ResourceManager.GetString("cmd.look.inspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no block within {0} meters that intersects with the line of sight..
        /// </summary>
        internal static string cmd_look_noinspection {
            get {
                return ResourceManager.GetString("cmd.look.noinspection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown direction &apos;{0}&apos;.
        /// </summary>
        internal static string cmd_look_unknown {
            get {
                return ResourceManager.GetString("cmd.look.unknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Chunk loading status: {0:P} - {1} out of {2} load completed..
        /// </summary>
        internal static string cmd_move_chunk_loading_status {
            get {
                return ResourceManager.GetString("cmd.move.chunk_loading_status", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The chunk where the target location resides has not yet been loaded.
        ///You can use &quot;/chunk status {0:0.0} {1:0.0} {2:0.0}&quot; to check the chunk loading status..
        /// </summary>
        internal static string cmd_move_chunk_not_loaded {
            get {
                return ResourceManager.GetString("cmd.move.chunk_not_loaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to walk or start walking..
        /// </summary>
        internal static string cmd_move_desc {
            get {
                return ResourceManager.GetString("cmd.move.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to force unsafe movements like falling or touching fire.
        /// </summary>
        internal static string cmd_move_desc_force {
            get {
                return ResourceManager.GetString("cmd.move.desc_force", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot move in that direction..
        /// </summary>
        internal static string cmd_move_dir_fail {
            get {
                return ResourceManager.GetString("cmd.move.dir_fail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disabling Terrain and Movements..
        /// </summary>
        internal static string cmd_move_disable {
            get {
                return ResourceManager.GetString("cmd.move.disable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enabling Terrain and Movements on next server login, respawn or world change..
        /// </summary>
        internal static string cmd_move_enable {
            get {
                return ResourceManager.GetString("cmd.move.enable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to compute path to {0}.
        /// </summary>
        internal static string cmd_move_fail {
            get {
                return ResourceManager.GetString("cmd.move.fail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Gravity is disabled..
        /// </summary>
        internal static string cmd_move_gravity_disabled {
            get {
                return ResourceManager.GetString("cmd.move.gravity.disabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Gravity is enabled..
        /// </summary>
        internal static string cmd_move_gravity_enabled {
            get {
                return ResourceManager.GetString("cmd.move.gravity.enabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moving {0}.
        /// </summary>
        internal static string cmd_move_moving {
            get {
                return ResourceManager.GetString("cmd.move.moving", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to compute a safe path to {0}. Try -f parameter to allow unsafe movements..
        /// </summary>
        internal static string cmd_move_suggestforce {
            get {
                return ResourceManager.GetString("cmd.move.suggestforce", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Walking from {1} to {0}.
        /// </summary>
        internal static string cmd_move_walk {
            get {
                return ResourceManager.GetString("cmd.move.walk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to restart and reconnect to the server..
        /// </summary>
        internal static string cmd_reco_desc {
            get {
                return ResourceManager.GetString("cmd.reco.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reloads MCC settings..
        /// </summary>
        internal static string cmd_reload_desc {
            get {
                return ResourceManager.GetString("cmd.reload.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reloaded Settings!.
        /// </summary>
        internal static string cmd_reload_finished {
            get {
                return ResourceManager.GetString("cmd.reload.finished", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reloading settings....
        /// </summary>
        internal static string cmd_reload_started {
            get {
                return ResourceManager.GetString("cmd.reload.started", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command will NOT affect certain settings which are used before connecting to a server!.
        /// </summary>
        internal static string cmd_reload_warning1 {
            get {
                return ResourceManager.GetString("cmd.reload.warning1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some settings passed through the command line parameters might get overriden!.
        /// </summary>
        internal static string cmd_reload_warning2 {
            get {
                return ResourceManager.GetString("cmd.reload.warning2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You also might need to reconnect for some settings to take effect..
        /// </summary>
        internal static string cmd_reload_warning3 {
            get {
                return ResourceManager.GetString("cmd.reload.warning3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replay Chat Bot will not be hard reloaded due to technical limitations!.
        /// </summary>
        internal static string cmd_reload_warning4 {
            get {
                return ResourceManager.GetString("cmd.reload.warning4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use this to respawn if you are dead..
        /// </summary>
        internal static string cmd_respawn_desc {
            get {
                return ResourceManager.GetString("cmd.respawn.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have respawned..
        /// </summary>
        internal static string cmd_respawn_done {
            get {
                return ResourceManager.GetString("cmd.respawn.done", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to run a script file..
        /// </summary>
        internal static string cmd_script_desc {
            get {
                return ResourceManager.GetString("cmd.script.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to send a chat message or command..
        /// </summary>
        internal static string cmd_send_desc {
            get {
                return ResourceManager.GetString("cmd.send.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to set a custom %variable%..
        /// </summary>
        internal static string cmd_set_desc {
            get {
                return ResourceManager.GetString("cmd.set.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to variable name must be A-Za-z0-9..
        /// </summary>
        internal static string cmd_set_format {
            get {
                return ResourceManager.GetString("cmd.set.format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to set a custom %variable% randomly to a given value..
        /// </summary>
        internal static string cmd_setrnd_desc {
            get {
                return ResourceManager.GetString("cmd.setrnd.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to setrnd variable -7to17 OR setrnd variable string1 &quot;\&quot;string2\&quot; string3&quot;.
        /// </summary>
        internal static string cmd_setrnd_format {
            get {
                return ResourceManager.GetString("cmd.setrnd.format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to setrnd variable -7to17.
        /// </summary>
        internal static string cmd_setrndnum_format {
            get {
                return ResourceManager.GetString("cmd.setrndnum.format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to setrnd variable string1 &quot;\&quot;string2\&quot; string3&quot;.
        /// </summary>
        internal static string cmd_setrndstr_format {
            get {
                return ResourceManager.GetString("cmd.setrndstr.format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Toggles sneaking.
        /// </summary>
        internal static string cmd_sneak_desc {
            get {
                return ResourceManager.GetString("cmd.sneak.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You are not sneaking anymore.
        /// </summary>
        internal static string cmd_sneak_off {
            get {
                return ResourceManager.GetString("cmd.sneak.off", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You are sneaking now.
        /// </summary>
        internal static string cmd_sneak_on {
            get {
                return ResourceManager.GetString("cmd.sneak.on", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Current tps.
        /// </summary>
        internal static string cmd_tps_current {
            get {
                return ResourceManager.GetString("cmd.tps.current", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display server current tps (tick per second). May not be accurate.
        /// </summary>
        internal static string cmd_tps_desc {
            get {
                return ResourceManager.GetString("cmd.tps.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place a block or open chest.
        /// </summary>
        internal static string cmd_useblock_desc {
            get {
                return ResourceManager.GetString("cmd.useblock.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Useblock at ({0:0.0}, {1:0.0}, {2:0.0}) {3}..
        /// </summary>
        internal static string cmd_useblock_use {
            get {
                return ResourceManager.GetString("cmd.useblock.use", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use (left click) an item on the hand.
        /// </summary>
        internal static string cmd_useitem_desc {
            get {
                return ResourceManager.GetString("cmd.useitem.desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used an item.
        /// </summary>
        internal static string cmd_useitem_use {
            get {
                return ResourceManager.GetString("cmd.useitem.use", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to can be used in some other fields as %yourvar%
        ///%username% and %serverip% are reserved variables..
        /// </summary>
        internal static string config_AppVars_Variables {
            get {
                return ResourceManager.GetString("config.AppVars.Variables", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §cFailed to write to backup file {0}§r.
        /// </summary>
        internal static string config_backup_fail {
            get {
                return ResourceManager.GetString("config.backup.fail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to =============================== #
        /// Minecraft Console Client Bots  #
        ///=============================== #.
        /// </summary>
        internal static string config_ChatBot {
            get {
                return ResourceManager.GetString("config.ChatBot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Get alerted when specified words are detected in chat
        ///Useful for moderating your server or detecting when someone is talking to you.
        /// </summary>
        internal static string config_ChatBot_Alerts {
            get {
                return ResourceManager.GetString("config.ChatBot.Alerts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Play a beep sound when a word is detected in addition to highlighting..
        /// </summary>
        internal static string config_ChatBot_Alerts_Beep_Enabled {
            get {
                return ResourceManager.GetString("config.ChatBot.Alerts.Beep_Enabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List of words/strings to NOT alert you on..
        /// </summary>
        internal static string config_ChatBot_Alerts_Excludes {
            get {
                return ResourceManager.GetString("config.ChatBot.Alerts.Excludes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of a file where alers logs will be written..
        /// </summary>
        internal static string config_ChatBot_Alerts_Log_File {
            get {
                return ResourceManager.GetString("config.ChatBot.Alerts.Log_File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log alerts info a file..
        /// </summary>
        internal static string config_ChatBot_Alerts_Log_To_File {
            get {
                return ResourceManager.GetString("config.ChatBot.Alerts.Log_To_File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List of words/strings to alert you on..
        /// </summary>
        internal static string config_ChatBot_Alerts_Matches {
            get {
                return ResourceManager.GetString("config.ChatBot.Alerts.Matches", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trigger alerts when it rains and when it stops..
        /// </summary>
        internal static string config_ChatBot_Alerts_Trigger_By_Rain {
            get {
                return ResourceManager.GetString("config.ChatBot.Alerts.Trigger_By_Rain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Triggers alerts at the beginning and end of thunderstorms..
        /// </summary>
        internal static string config_ChatBot_Alerts_Trigger_By_Thunderstorm {
            get {
                return ResourceManager.GetString("config.ChatBot.Alerts.Trigger_By_Thunderstorm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Triggers an alert after receiving a specified keyword..
        /// </summary>
        internal static string config_ChatBot_Alerts_Trigger_By_Words {
            get {
                return ResourceManager.GetString("config.ChatBot.Alerts.Trigger_By_Words", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Send a command on a regular or random basis or make the bot walk around randomly to avoid automatic AFK disconnection
        ////!\ Make sure your server rules do not forbid anti-AFK mechanisms!
        ////!\ Make sure you keep the bot in an enclosure to prevent it wandering off if you&apos;re using terrain handling! (Recommended size 5x5x5).
        /// </summary>
        internal static string config_ChatBot_AntiAfk {
            get {
                return ResourceManager.GetString("config.ChatBot.AntiAfk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command to send to the server..
        /// </summary>
        internal static string config_ChatBot_AntiAfk_Command {
            get {
                return ResourceManager.GetString("config.ChatBot.AntiAfk.Command", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The time interval for execution. (in seconds).
        /// </summary>
        internal static string config_ChatBot_AntiAfk_Delay {
            get {
                return ResourceManager.GetString("config.ChatBot.AntiAfk.Delay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to sneak when sending the command..
        /// </summary>
        internal static string config_ChatBot_AntiAfk_Use_Sneak {
            get {
                return ResourceManager.GetString("config.ChatBot.AntiAfk.Use_Sneak", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use terrain handling to enable the bot to move around..
        /// </summary>
        internal static string config_ChatBot_AntiAfk_Use_Terrain_Handling {
            get {
                return ResourceManager.GetString("config.ChatBot.AntiAfk.Use_Terrain_Handling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The range the bot can move around randomly (Note: the bigger the range, the slower the bot will be).
        /// </summary>
        internal static string config_ChatBot_AntiAfk_Walk_Range {
            get {
                return ResourceManager.GetString("config.ChatBot.AntiAfk.Walk_Range", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How many times can the bot fail trying to move before using the command method..
        /// </summary>
        internal static string config_ChatBot_AntiAfk_Walk_Retries {
            get {
                return ResourceManager.GetString("config.ChatBot.AntiAfk.Walk_Retries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically attack hostile mobs around you
        ///You need to enable Entity Handling to use this bot
        ////!\ Make sure server rules allow your planned use of AutoAttack
        ////!\ SERVER PLUGINS may consider AutoAttack to be a CHEAT MOD and TAKE ACTION AGAINST YOUR ACCOUNT so DOUBLE CHECK WITH SERVER RULES!.
        /// </summary>
        internal static string config_ChatBot_AutoAttack {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoAttack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allow attacking hostile mobs..
        /// </summary>
        internal static string config_ChatBot_AutoAttack_Attack_Hostile {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoAttack.Attack_Hostile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allow attacking passive mobs..
        /// </summary>
        internal static string config_ChatBot_AutoAttack_Attack_Passive {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoAttack.Attack_Passive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How long to wait between each attack. Set &quot;Custom = false&quot; to let MCC calculate it..
        /// </summary>
        internal static string config_ChatBot_AutoAttack_Cooldown_Time {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoAttack.Cooldown_Time", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All entity types can be found here: https://mccteam.github.io/r/entity/#L15.
        /// </summary>
        internal static string config_ChatBot_AutoAttack_Entites_List {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoAttack.Entites_List", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Possible values: &quot;Interact&quot;, &quot;Attack&quot; (default), &quot;InteractAt&quot; (Interact and Attack)..
        /// </summary>
        internal static string config_ChatBot_AutoAttack_Interaction {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoAttack.Interaction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wether to treat the entities list as a &quot;whitelist&quot; or as a &quot;blacklist&quot;..
        /// </summary>
        internal static string config_ChatBot_AutoAttack_List_Mode {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoAttack.List_Mode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;single&quot; or &quot;multi&quot;. single target one mob per attack. multi target all mobs in range per attack.
        /// </summary>
        internal static string config_ChatBot_AutoAttack_Mode {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoAttack.Mode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;health&quot; or &quot;distance&quot;. Only needed when using single mode.
        /// </summary>
        internal static string config_ChatBot_AutoAttack_Priority {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoAttack.Priority", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically craft items in your inventory
        ///See https://mccteam.github.io/g/bots/#auto-craft for how to use
        ///You need to enable Inventory Handling to use this bot
        ///You should also enable Terrain and Movements if you need to use a crafting table.
        /// </summary>
        internal static string config_ChatBot_AutoCraft {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoCraft", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Location of the crafting table if you intended to use it. Terrain and movements must be enabled..
        /// </summary>
        internal static string config_ChatBot_AutoCraft_CraftingTable {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoCraft.CraftingTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to What to do on crafting failure, &quot;abort&quot; or &quot;wait&quot;..
        /// </summary>
        internal static string config_ChatBot_AutoCraft_OnFailure {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoCraft.OnFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recipes.Name: The name can be whatever you like and it is used to represent the recipe.
        ///Recipes.Type: crafting table type: &quot;player&quot; or &quot;table&quot;
        ///Recipes.Result: the resulting item
        ///Recipes.Slots: All slots, counting from left to right, top to bottom. Please fill in &quot;Null&quot; for empty slots.
        ///For the naming of the items, please see: https://mccteam.github.io/r/item/#L12.
        /// </summary>
        internal static string config_ChatBot_AutoCraft_Recipes {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoCraft.Recipes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto-digging blocks.
        ///You need to enable Terrain Handling to use this bot
        ///You can use &quot;/digbot start&quot; and &quot;/digbot stop&quot; to control the start and stop of AutoDig.
        ///Since MCC does not yet support accurate calculation of the collision volume of blocks, all blocks are considered as complete cubes when obtaining the position of the lookahead.
        ///For the naming of the block, please see https://mccteam.github.io/r/block/#L15.
        /// </summary>
        internal static string config_ChatBot_AutoDig {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoDig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How many seconds to wait after entering the game to start digging automatically, set to -1 to disable automatic start..
        /// </summary>
        internal static string config_ChatBot_AutoDig_Auto_Start_Delay {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoDig.Auto_Start_Delay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically switch to the appropriate tool..
        /// </summary>
        internal static string config_ChatBot_AutoDig_Auto_Tool_Switch {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoDig.Auto_Tool_Switch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mining a block for more than &quot;Dig_Timeout&quot; seconds will be considered a timeout..
        /// </summary>
        internal static string config_ChatBot_AutoDig_Dig_Timeout {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoDig.Dig_Timeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to drop the current tool when its durability is too low..
        /// </summary>
        internal static string config_ChatBot_AutoDig_Drop_Low_Durability_Tools {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoDig.Drop_Low_Durability_Tools", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Will not use tools with less durability than this. Set to zero to disable this feature..
        /// </summary>
        internal static string config_ChatBot_AutoDig_Durability_Limit {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoDig.Durability_Limit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wether to treat the blocks list as a &quot;whitelist&quot; or as a &quot;blacklist&quot;..
        /// </summary>
        internal static string config_ChatBot_AutoDig_List_Type {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoDig.List_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;distance&quot; or &quot;index&quot;, When using the &quot;fixedpos&quot; mode, the blocks are determined by distance to the player, or by the order in the list..
        /// </summary>
        internal static string config_ChatBot_AutoDig_Location_Order {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoDig.Location_Order", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The position of the blocks when using &quot;fixedpos&quot; or &quot;both&quot; mode..
        /// </summary>
        internal static string config_ChatBot_AutoDig_Locations {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoDig.Locations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to output logs when digging blocks..
        /// </summary>
        internal static string config_ChatBot_AutoDig_Log_Block_Dig {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoDig.Log_Block_Dig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;lookat&quot;, &quot;fixedpos&quot; or &quot;both&quot;. Digging the block being looked at, the block in a fixed position, or the block that needs to be all met..
        /// </summary>
        internal static string config_ChatBot_AutoDig_Mode {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoDig.Mode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically drop items in inventory
        ///You need to enable Inventory Handling to use this bot
        ///See this file for an up-to-date list of item types you can use with this bot: https://mccteam.github.io/r/item/#L12.
        /// </summary>
        internal static string config_ChatBot_AutoDrop {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoDrop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;include&quot;, &quot;exclude&quot; or &quot;everything&quot;. Include: drop item IN the list. Exclude: drop item NOT IN the list.
        /// </summary>
        internal static string config_ChatBot_AutoDrop_Mode {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoDrop.Mode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically eat food when your Hunger value is low
        ///You need to enable Inventory Handling to use this bot.
        /// </summary>
        internal static string config_ChatBot_AutoEat {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoEat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically catch fish using a fishing rod
        ///Guide: https://mccteam.github.io/g/bots/#auto-fishing
        ///You can use &quot;/fish&quot; to control the bot manually.
        ////!\ Make sure server rules allow automated farming before using this bot.
        /// </summary>
        internal static string config_ChatBot_AutoFishing {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoFishing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Keep it as false if you have not changed it before..
        /// </summary>
        internal static string config_ChatBot_AutoFishing_Antidespawn {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoFishing.Antidespawn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switch to a new rod from inventory after the current rod is unavailable..
        /// </summary>
        internal static string config_ChatBot_AutoFishing_Auto_Rod_Switch {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoFishing.Auto_Rod_Switch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to start fishing automatically after entering a world..
        /// </summary>
        internal static string config_ChatBot_AutoFishing_Auto_Start {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoFishing.Auto_Start", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How soon to re-cast after successful fishing..
        /// </summary>
        internal static string config_ChatBot_AutoFishing_Cast_Delay {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoFishing.Cast_Delay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Will not use rods with less durability than this (full durability is 64). Set to zero to disable this feature..
        /// </summary>
        internal static string config_ChatBot_AutoFishing_Durability_Limit {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoFishing.Durability_Limit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This allows the player to change position/facing after each fish caught..
        /// </summary>
        internal static string config_ChatBot_AutoFishing_Enable_Move {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoFishing.Enable_Move", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How long after entering the game to start fishing (seconds)..
        /// </summary>
        internal static string config_ChatBot_AutoFishing_Fishing_Delay {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoFishing.Fishing_Delay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fishing timeout (seconds). Timeout will trigger a re-cast..
        /// </summary>
        internal static string config_ChatBot_AutoFishing_Fishing_Timeout {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoFishing.Fishing_Timeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A &quot;stationary&quot; hook that moves above this threshold in the Y-axis will be considered to have caught a fish..
        /// </summary>
        internal static string config_ChatBot_AutoFishing_Hook_Threshold {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoFishing.Hook_Threshold", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used to adjust the above two thresholds, which when enabled will print the change in the position of the fishhook entity upon receipt of its movement packet..
        /// </summary>
        internal static string config_ChatBot_AutoFishing_Log_Fish_Bobber {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoFishing.Log_Fish_Bobber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the mainhand or the offhand to hold the rod..
        /// </summary>
        internal static string config_ChatBot_AutoFishing_Mainhand {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoFishing.Mainhand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It will move in order &quot;1-&gt;2-&gt;3-&gt;4-&gt;3-&gt;2-&gt;1-&gt;2-&gt;...&quot; and can change position or facing or both each time. It is recommended to change the facing only..
        /// </summary>
        internal static string config_ChatBot_AutoFishing_Movements {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoFishing.Movements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hook movement in the X and Z axis less than this value will be considered stationary..
        /// </summary>
        internal static string config_ChatBot_AutoFishing_Stationary_Threshold {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoFishing.Stationary_Threshold", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically relog when disconnected by server, for example because the server is restating
        ////!\ Use Ignore_Kick_Message=true at own risk! Server staff might not appreciate if you auto-relog on manual kicks.
        /// </summary>
        internal static string config_ChatBot_AutoRelog {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoRelog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The delay time before joining the server. (in seconds).
        /// </summary>
        internal static string config_ChatBot_AutoRelog_Delay {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoRelog.Delay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When set to true, autorelog will reconnect regardless of kick messages..
        /// </summary>
        internal static string config_ChatBot_AutoRelog_Ignore_Kick_Message {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoRelog.Ignore_Kick_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the kickout message matches any of the strings, then autorelog will be triggered..
        /// </summary>
        internal static string config_ChatBot_AutoRelog_Kick_Messages {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoRelog.Kick_Messages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Retries when failing to relog to the server. use -1 for unlimited retries..
        /// </summary>
        internal static string config_ChatBot_AutoRelog_Retries {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoRelog.Retries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Run commands or send messages automatically when a specified pattern is detected in chat
        ///Server admins can spoof chat messages (/nick, /tellraw) so keep this in mind when implementing AutoRespond rules
        ////!\ This bot may get spammy depending on your rules, although the global messagecooldown setting can help you avoiding accidental spam.
        /// </summary>
        internal static string config_ChatBot_AutoRespond {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoRespond", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not remove colors from text (Note: Your matches will have to include color codes (ones using the § character) in order to work).
        /// </summary>
        internal static string config_ChatBot_AutoRespond_Match_Colors {
            get {
                return ResourceManager.GetString("config.ChatBot.AutoRespond.Match_Colors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs chat messages in a file on disk..
        /// </summary>
        internal static string config_ChatBot_ChatLog {
            get {
                return ResourceManager.GetString("config.ChatBot.ChatLog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This bot allows you to send and recieve messages and commands via a Discord channel.
        ///For Setup you can either use the documentation or read here (Documentation has images).
        ///Documentation: https://mccteam.github.io/g/bots/#discord-bridge
        ///Setup:
        ///First you need to create a Bot on the Discord Developers Portal, here is a video tutorial: https://www.youtube.com/watch?v=2FgMnZViNPA .
        ////!\ IMPORTANT /!\: When creating a bot, you MUST ENABLE &quot;Message Content Intent&quot;, &quot;Server Members Intent&quot; and &quot;Presence Intent [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string config_ChatBot_DiscordBridge {
            get {
                return ResourceManager.GetString("config.ChatBot.DiscordBridge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ID of a channel where you want to interact with the MCC using the bot..
        /// </summary>
        internal static string config_ChatBot_DiscordBridge_ChannelId {
            get {
                return ResourceManager.GetString("config.ChatBot.DiscordBridge.ChannelId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message formats
        ///Words wrapped with { and } are going to be replaced during the code execution, do not change them!
        ///For example. {message} is going to be replace with an actual message, {username} will be replaced with an username, {timestamp} with the current time.
        ///For Discord message formatting, check the following: https://mccteam.github.io/r/dc-fmt.html.
        /// </summary>
        internal static string config_ChatBot_DiscordBridge_Formats {
            get {
                return ResourceManager.GetString("config.ChatBot.DiscordBridge.Formats", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ID of a server/guild where you have invited the bot to..
        /// </summary>
        internal static string config_ChatBot_DiscordBridge_GuildId {
            get {
                return ResourceManager.GetString("config.ChatBot.DiscordBridge.GuildId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How long to wait (in seconds) if a message can not be sent to discord before canceling the task (minimum 1 second)..
        /// </summary>
        internal static string config_ChatBot_DiscordBridge_MessageSendTimeout {
            get {
                return ResourceManager.GetString("config.ChatBot.DiscordBridge.MessageSendTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A list of IDs of people you want to be able to interact with the MCC using the bot..
        /// </summary>
        internal static string config_ChatBot_DiscordBridge_OwnersIds {
            get {
                return ResourceManager.GetString("config.ChatBot.DiscordBridge.OwnersIds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your Discord Bot token..
        /// </summary>
        internal static string config_ChatBot_DiscordBridge_Token {
            get {
                return ResourceManager.GetString("config.ChatBot.DiscordBridge.Token", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically farms crops for you (plants, breaks and bonemeals them).
        ///Crop types available: Beetroot, Carrot, Melon, Netherwart, Pumpkin, Potato, Wheat.
        ///Usage: &quot;/farmer start&quot; command and &quot;/farmer stop&quot; command.
        ///NOTE: This a newly added bot, it is not perfect and was only tested in 1.19.2, there are some minor issues like not being able to bonemeal carrots/potatoes sometimes.
        ///or bot jumps onto the farm land and breaks it (this happens rarely but still happens). We are looking forward at improving this. [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string config_ChatBot_Farmer {
            get {
                return ResourceManager.GetString("config.ChatBot.Farmer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delay between tasks in seconds (Minimum 1 second).
        /// </summary>
        internal static string config_ChatBot_Farmer_Delay_Between_Tasks {
            get {
                return ResourceManager.GetString("config.ChatBot.Farmer.Delay_Between_Tasks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enabled you to make the bot follow you
        ///NOTE: This is an experimental feature, the bot can be slow at times, you need to walk with a normal speed and to sometimes stop for it to be able to keep up with you
        ///It&apos;s similar to making animals follow you when you&apos;re holding food in your hand.
        ///This is due to a slow pathfinding algorithm, we&apos;re working on getting a better one
        ///You can tweak the update limit and find what works best for you. (NOTE: Do not but a very low one, because you might achieve the opposite,        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string config_ChatBot_FollowPlayer {
            get {
                return ResourceManager.GetString("config.ChatBot.FollowPlayer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not follow the player if he is in the range of 3 blocks (prevents the bot from pushing a player in an infinite loop).
        /// </summary>
        internal static string config_ChatBot_FollowPlayer_Stop_At_Distance {
            get {
                return ResourceManager.GetString("config.ChatBot.FollowPlayer.Stop_At_Distance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The rate at which the bot does calculations (in seconds) (You can tweak this if you feel the bot is too slow).
        /// </summary>
        internal static string config_ChatBot_FollowPlayer_Update_Limit {
            get {
                return ResourceManager.GetString("config.ChatBot.FollowPlayer.Update_Limit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A small game to demonstrate chat interactions. Players can guess mystery words one letter at a time.
        ///You need to have ChatFormat working correctly and add yourself in botowners to start the game with /tell &lt;bot username&gt; start
        ////!\ This bot may get a bit spammy if many players are interacting with it.
        /// </summary>
        internal static string config_ChatBot_HangmanGame {
            get {
                return ResourceManager.GetString("config.ChatBot.HangmanGame", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Relay messages between players and servers, like a mail plugin
        ///This bot can store messages when the recipients are offline, and send them when they join the server
        ////!\ Server admins can spoof PMs (/tellraw, /nick) so enable this bot only if you trust server admins.
        /// </summary>
        internal static string config_ChatBot_Mailer {
            get {
                return ResourceManager.GetString("config.ChatBot.Mailer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allows you to render maps in the console and into images (which can be then sent to Discord using Discord Bridge Chat Bot)
        ///This is useful for solving captchas which use maps
        ///The maps are rendered into Rendered_Maps folder if the Save_To_File is enabled.
        ///NOTE:
        ///If some servers have a very short time for solving captchas, enabe Auto_Render_On_Update to see them immediatelly in the console.
        ////!\ Make sure server rules allow bots to be used on the server, or you risk being punished..
        /// </summary>
        internal static string config_ChatBot_Map {
            get {
                return ResourceManager.GetString("config.ChatBot.Map", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically render the map once it is received or updated from/by the server.
        /// </summary>
        internal static string config_ChatBot_Map_Auto_Render_On_Update {
            get {
                return ResourceManager.GetString("config.ChatBot.Map.Auto_Render_On_Update", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delete all rendered maps on unload/reload or when you launch the MCC again..
        /// </summary>
        internal static string config_ChatBot_Map_Delete_All_On_Unload {
            get {
                return ResourceManager.GetString("config.ChatBot.Map.Delete_All_On_Unload", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Get a notification when you have gotten a map from the server for the first time.
        /// </summary>
        internal static string config_ChatBot_Map_Notify_On_First_Update {
            get {
                return ResourceManager.GetString("config.ChatBot.Map.Notify_On_First_Update", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resize an rendered image, this is useful when images that are rendered are small and when are being sent to Discord..
        /// </summary>
        internal static string config_ChatBot_Map_Rasize_Rendered_Image {
            get {
                return ResourceManager.GetString("config.ChatBot.Map.Rasize_Rendered_Image", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to render the map in the console..
        /// </summary>
        internal static string config_ChatBot_Map_Render_In_Console {
            get {
                return ResourceManager.GetString("config.ChatBot.Map.Render_In_Console", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size that a rendered image should be resized to, in pixels (eg. 512)..
        /// </summary>
        internal static string config_ChatBot_Map_Resize_To {
            get {
                return ResourceManager.GetString("config.ChatBot.Map.Resize_To", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to store the rendered map as a file (You need this setting if you want to get a map on Discord using Discord Bridge)..
        /// </summary>
        internal static string config_ChatBot_Map_Save_To_File {
            get {
                return ResourceManager.GetString("config.ChatBot.Map.Save_To_File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Send a rendered map (saved to a file) to a Discord or a Telegram channel via the Discord or Telegram Bride chat bot (The Discord/Telegram Bridge chat bot must be enabled and configured!)
        ///You need to enable Save_To_File in order for this to work.
        ///We also recommend turning on resizing..
        /// </summary>
        internal static string config_ChatBot_Map_Send_Rendered_To_Bridges {
            get {
                return ResourceManager.GetString("config.ChatBot.Map.Send_Rendered_To_Bridges", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log the list of players periodically into a textual file..
        /// </summary>
        internal static string config_ChatBot_PlayerListLogger {
            get {
                return ResourceManager.GetString("config.ChatBot.PlayerListLogger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (In seconds).
        /// </summary>
        internal static string config_ChatBot_PlayerListLogger_Delay {
            get {
                return ResourceManager.GetString("config.ChatBot.PlayerListLogger.Delay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Send MCC console commands to your bot through server PMs (/tell)
        ///You need to have ChatFormat working correctly and add yourself in botowners to use the bot
        ////!\ Server admins can spoof PMs (/tellraw, /nick) so enable RemoteControl only if you trust server admins.
        /// </summary>
        internal static string config_ChatBot_RemoteControl {
            get {
                return ResourceManager.GetString("config.ChatBot.RemoteControl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable recording of the game (/replay start) and replay it later using the Replay Mod (https://www.replaymod.com/)
        ///Please note that due to technical limitations, the client player (you) will not be shown in the replay file
        ////!\ You SHOULD use /replay stop or exit the program gracefully with /quit OR THE REPLAY FILE MAY GET CORRUPT!.
        /// </summary>
        internal static string config_ChatBot_ReplayCapture {
            get {
                return ResourceManager.GetString("config.ChatBot.ReplayCapture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How long should replay file be auto-saved, in seconds. Use -1 to disable..
        /// </summary>
        internal static string config_ChatBot_ReplayCapture_Backup_Interval {
            get {
                return ResourceManager.GetString("config.ChatBot.ReplayCapture.Backup_Interval", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Schedule commands and scripts to launch on various events such as server join, date/time or time interval
        ///See https://mccteam.github.io/g/bots/#script-scheduler for more info.
        /// </summary>
        internal static string config_ChatBot_ScriptScheduler {
            get {
                return ResourceManager.GetString("config.ChatBot.ScriptScheduler", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This bot allows you to send and receive messages and commands via a Telegram Bot DM or to receive messages in a Telegram channel.
        ////!\ NOTE: You can&apos;t send messages and commands from a group channel, you can only send them in the bot DM, but you can get the messages from the client in a group channel.
        ///-----------------------------------------------------------
        ///Setup:
        ///First you need to create a Telegram bot and obtain an API key, to do so, go to Telegram and find @botfather
        ///Click on &quot;Start&quot; button and re [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string config_ChatBot_TelegramBridge {
            get {
                return ResourceManager.GetString("config.ChatBot.TelegramBridge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A list of Chat IDs that are allowed to send messages and execute commands. To get an id of your chat DM with the bot use &quot;.chatid&quot; bot command in Telegram..
        /// </summary>
        internal static string config_ChatBot_TelegramBridge_Authorized_Chat_Ids {
            get {
                return ResourceManager.GetString("config.ChatBot.TelegramBridge.Authorized_Chat_Ids", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An ID of a channel where you want to interact with the MCC using the bot..
        /// </summary>
        internal static string config_ChatBot_TelegramBridge_ChannelId {
            get {
                return ResourceManager.GetString("config.ChatBot.TelegramBridge.ChannelId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message formats
        ///Words wrapped with { and } are going to be replaced during the code execution, do not change them!
        ///For example. {message} is going to be replace with an actual message, {username} will be replaced with an username, {timestamp} with the current time.
        ///For Telegram message formatting, check the following: https://mccteam.github.io/r/tg-fmt.html.
        /// </summary>
        internal static string config_ChatBot_TelegramBridge_Formats {
            get {
                return ResourceManager.GetString("config.ChatBot.TelegramBridge.Formats", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How long to wait (in seconds) if a message can not be sent to Telegram before canceling the task (minimum 1 second)..
        /// </summary>
        internal static string config_ChatBot_TelegramBridge_MessageSendTimeout {
            get {
                return ResourceManager.GetString("config.ChatBot.TelegramBridge.MessageSendTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your Telegram Bot token..
        /// </summary>
        internal static string config_ChatBot_TelegramBridge_Token {
            get {
                return ResourceManager.GetString("config.ChatBot.TelegramBridge.Token", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MCC does it best to detect chat messages, but some server have unusual chat formats
        ///When this happens, you&apos;ll need to configure chat format below, see https://mccteam.github.io/g/conf/#chat-format-section.
        /// </summary>
        internal static string config_ChatFormat {
            get {
                return ResourceManager.GetString("config.ChatFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MCC support for common message formats. Set &quot;false&quot; to avoid conflicts with custom formats..
        /// </summary>
        internal static string config_ChatFormat_Builtins {
            get {
                return ResourceManager.GetString("config.ChatFormat.Builtins", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to use the custom regular expressions below for detection..
        /// </summary>
        internal static string config_ChatFormat_UserDefined {
            get {
                return ResourceManager.GetString("config.ChatFormat.UserDefined", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Startup Config File
        ///Please do not record extraneous data in this file as it will be overwritten by MCC.
        ///
        ///New to Minecraft Console Client? Check out this document: https://mccteam.github.io/g/conf.html
        ///Want to upgrade to a newer version? See https://github.com/MCCTeam/Minecraft-Console-Client/#download.
        /// </summary>
        internal static string config_Head {
            get {
                return ResourceManager.GetString("config.Head", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Settings have been loaded from {0}.
        /// </summary>
        internal static string config_load {
            get {
                return ResourceManager.GetString("config.load", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §cFailed to load settings:§r.
        /// </summary>
        internal static string config_load_fail {
            get {
                return ResourceManager.GetString("config.load.fail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This setting affects only the messages in the console..
        /// </summary>
        internal static string config_Logging {
            get {
                return ResourceManager.GetString("config.Logging", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Regex for filtering chat message..
        /// </summary>
        internal static string config_Logging_ChatFilter {
            get {
                return ResourceManager.GetString("config.Logging.ChatFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show server chat messages..
        /// </summary>
        internal static string config_Logging_ChatMessages {
            get {
                return ResourceManager.GetString("config.Logging.ChatMessages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Regex for filtering debug message..
        /// </summary>
        internal static string config_Logging_DebugFilter {
            get {
                return ResourceManager.GetString("config.Logging.DebugFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please enable this before submitting bug reports. Thanks!.
        /// </summary>
        internal static string config_Logging_DebugMessages {
            get {
                return ResourceManager.GetString("config.Logging.DebugMessages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show error messages..
        /// </summary>
        internal static string config_Logging_ErrorMessages {
            get {
                return ResourceManager.GetString("config.Logging.ErrorMessages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;disable&quot; or &quot;blacklist&quot; OR &quot;whitelist&quot;. Blacklist hide message match regex. Whitelist show message match regex..
        /// </summary>
        internal static string config_Logging_FilterMode {
            get {
                return ResourceManager.GetString("config.Logging.FilterMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Informative messages. (i.e Most of the message from MCC).
        /// </summary>
        internal static string config_Logging_InfoMessages {
            get {
                return ResourceManager.GetString("config.Logging.InfoMessages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log file name..
        /// </summary>
        internal static string config_Logging_LogFile {
            get {
                return ResourceManager.GetString("config.Logging.LogFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Write log messages to file..
        /// </summary>
        internal static string config_Logging_LogToFile {
            get {
                return ResourceManager.GetString("config.Logging.LogToFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prepend timestamp to messages in log file..
        /// </summary>
        internal static string config_Logging_PrependTimestamp {
            get {
                return ResourceManager.GetString("config.Logging.PrependTimestamp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Keep color codes in the saved text.(look like &quot;§b&quot;).
        /// </summary>
        internal static string config_Logging_SaveColorCodes {
            get {
                return ResourceManager.GetString("config.Logging.SaveColorCodes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show warning messages..
        /// </summary>
        internal static string config_Logging_WarningMessages {
            get {
                return ResourceManager.GetString("config.Logging.WarningMessages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make sure you understand what each setting does before changing anything!.
        /// </summary>
        internal static string config_Main_Advanced {
            get {
                return ResourceManager.GetString("config.Main.Advanced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AccountList: It allows a fast account switching without directly using the credentials
        ///Usage examples: &quot;/tell &lt;mybot&gt; reco Player2&quot;, &quot;/connect &lt;serverip&gt; Player1&quot;.
        /// </summary>
        internal static string config_Main_Advanced_account_list {
            get {
                return ResourceManager.GetString("config.Main.Advanced.account_list", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Toggle auto respawn if client player was dead (make sure your spawn point is safe)..
        /// </summary>
        internal static string config_Main_Advanced_auto_respawn {
            get {
                return ResourceManager.GetString("config.Main.Advanced.auto_respawn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set the owner of the bot. /!\ Server admins can impersonate owners!.
        /// </summary>
        internal static string config_Main_Advanced_bot_owners {
            get {
                return ResourceManager.GetString("config.Main.Advanced.bot_owners", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &quot;mcc&quot;, &quot;vanilla&quot; or &quot;none&quot;. This is how MCC identifies itself to the server..
        /// </summary>
        internal static string config_Main_Advanced_brand_info {
            get {
                return ResourceManager.GetString("config.Main.Advanced.brand_info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Leave empty for no logfile..
        /// </summary>
        internal static string config_Main_Advanced_chatbot_log_file {
            get {
                return ResourceManager.GetString("config.Main.Advanced.chatbot_log_file", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If turned off, the emoji will be replaced with a simpler character (for /chunk status)..
        /// </summary>
        internal static string config_Main_Advanced_enable_emoji {
            get {
                return ResourceManager.GetString("config.Main.Advanced.enable_emoji", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Toggle entity handling..
        /// </summary>
        internal static string config_Main_Advanced_entity_handling {
            get {
                return ResourceManager.GetString("config.Main.Advanced.entity_handling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to exit directly when an error occurs, for using MCC in non-interactive scripts..
        /// </summary>
        internal static string config_Main_Advanced_exit_on_failure {
            get {
                return ResourceManager.GetString("config.Main.Advanced.exit_on_failure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &quot;none&quot;, &quot;slash&quot;(/) or &quot;backslash&quot;(\)..
        /// </summary>
        internal static string config_Main_Advanced_internal_cmd_char {
            get {
                return ResourceManager.GetString("config.Main.Advanced.internal_cmd_char", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Toggle inventory handling..
        /// </summary>
        internal static string config_Main_Advanced_inventory_handling {
            get {
                return ResourceManager.GetString("config.Main.Advanced.inventory_handling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fill in with in-game locale code, check https://mccteam.github.io/r/l-code.html.
        /// </summary>
        internal static string config_Main_Advanced_language {
            get {
                return ResourceManager.GetString("config.Main.Advanced.language", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The language code is invalid!.
        /// </summary>
        internal static string config_Main_Advanced_language_invaild {
            get {
                return ResourceManager.GetString("config.Main.Advanced.language.invaild", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Load translations applied to MCC when available, turn it off to use English only..
        /// </summary>
        internal static string config_Main_Advanced_LoadMccTrans {
            get {
                return ResourceManager.GetString("config.Main.Advanced.LoadMccTrans", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &quot;auto&quot;, &quot;no&quot; or &quot;force&quot;. Force-enabling only works for MC 1.13+..
        /// </summary>
        internal static string config_Main_Advanced_mc_forge {
            get {
                return ResourceManager.GetString("config.Main.Advanced.mc_forge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &quot;auto&quot; or &quot;1.X.X&quot; values. Allows to skip server info retrieval..
        /// </summary>
        internal static string config_Main_Advanced_mc_version {
            get {
                return ResourceManager.GetString("config.Main.Advanced.mc_version", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Controls the minimum interval (in seconds) between sending each message to the server..
        /// </summary>
        internal static string config_Main_Advanced_message_cooldown {
            get {
                return ResourceManager.GetString("config.Main.Advanced.message_cooldown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable support for joining Minecraft Realms worlds..
        /// </summary>
        internal static string config_Main_Advanced_minecraft_realms {
            get {
                return ResourceManager.GetString("config.Main.Advanced.minecraft_realms", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The minimum height to use when calculating the image size from the height of the terminal..
        /// </summary>
        internal static string config_Main_Advanced_MinTerminalHeight {
            get {
                return ResourceManager.GetString("config.Main.Advanced.MinTerminalHeight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The minimum width used when calculating the image size from the width of the terminal..
        /// </summary>
        internal static string config_Main_Advanced_MinTerminalWidth {
            get {
                return ResourceManager.GetString("config.Main.Advanced.MinTerminalWidth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable head movement while walking to avoid anti-cheat triggers..
        /// </summary>
        internal static string config_Main_Advanced_move_head_while_walking {
            get {
                return ResourceManager.GetString("config.Main.Advanced.move_head_while_walking", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A movement speed higher than 2 may be considered cheating..
        /// </summary>
        internal static string config_Main_Advanced_movement_speed {
            get {
                return ResourceManager.GetString("config.Main.Advanced.movement_speed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only works on Windows XP-8 or Windows 10 with old console..
        /// </summary>
        internal static string config_Main_Advanced_player_head_icon {
            get {
                return ResourceManager.GetString("config.Main.Advanced.player_head_icon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For remote control of the bot..
        /// </summary>
        internal static string config_Main_Advanced_private_msgs_cmd_name {
            get {
                return ResourceManager.GetString("config.Main.Advanced.private_msgs_cmd_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How to retain profile key. Use &quot;none&quot;, &quot;memory&quot; or &quot;disk&quot;..
        /// </summary>
        internal static string config_Main_Advanced_profilekey_cache {
            get {
                return ResourceManager.GetString("config.Main.Advanced.profilekey_cache", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &quot;no&quot;, &quot;fast&quot; (5s timeout), or &quot;yes&quot;. Required for joining some servers..
        /// </summary>
        internal static string config_Main_Advanced_resolve_srv_records {
            get {
                return ResourceManager.GetString("config.Main.Advanced.resolve_srv_records", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cache compiled scripts for faster load on low-end devices..
        /// </summary>
        internal static string config_Main_Advanced_script_cache {
            get {
                return ResourceManager.GetString("config.Main.Advanced.script_cache", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ServerList: It allows an easier and faster server switching with short aliases instead of full server IP
        ///Aliases cannot contain dots or spaces, and the name &quot;localhost&quot; cannot be used as an alias.
        ///Usage examples: &quot;/tell &lt;mybot&gt; connect Server1&quot;, &quot;/connect Server2&quot;.
        /// </summary>
        internal static string config_Main_Advanced_server_list {
            get {
                return ResourceManager.GetString("config.Main.Advanced.server_list", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How to retain session tokens. Use &quot;none&quot;, &quot;memory&quot; or &quot;disk&quot;..
        /// </summary>
        internal static string config_Main_Advanced_session_cache {
            get {
                return ResourceManager.GetString("config.Main.Advanced.session_cache", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Decode links embedded in chat messages and show them in console..
        /// </summary>
        internal static string config_Main_Advanced_show_chat_links {
            get {
                return ResourceManager.GetString("config.Main.Advanced.show_chat_links", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show inventory layout as ASCII art in inventory command..
        /// </summary>
        internal static string config_Main_Advanced_show_inventory_layout {
            get {
                return ResourceManager.GetString("config.Main.Advanced.show_inventory_layout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to System messages for server ops..
        /// </summary>
        internal static string config_Main_Advanced_show_system_messages {
            get {
                return ResourceManager.GetString("config.Main.Advanced.show_system_messages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Messages displayed above xp bar, set this to false in case of xp bar spam..
        /// </summary>
        internal static string config_Main_Advanced_show_xpbar_messages {
            get {
                return ResourceManager.GetString("config.Main.Advanced.show_xpbar_messages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Temporary fix for Badpacket issue on some servers..
        /// </summary>
        internal static string config_Main_Advanced_temporary_fix_badpacket {
            get {
                return ResourceManager.GetString("config.Main.Advanced.temporary_fix_badpacket", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &quot;none&quot;, &quot;bit_4&quot;, &quot;bit_8&quot; or &quot;bit_24&quot;. This can be checked by opening the debug log..
        /// </summary>
        internal static string config_Main_Advanced_TerminalColorDepth {
            get {
                return ResourceManager.GetString("config.Main.Advanced.TerminalColorDepth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uses more ram, cpu, bandwidth but allows you to move around..
        /// </summary>
        internal static string config_Main_Advanced_terrain_and_movements {
            get {
                return ResourceManager.GetString("config.Main.Advanced.terrain_and_movements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Customize the TCP connection timeout with the server. (in seconds).
        /// </summary>
        internal static string config_Main_Advanced_timeout {
            get {
                return ResourceManager.GetString("config.Main.Advanced.timeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prepend timestamps to chat messages..
        /// </summary>
        internal static string config_Main_Advanced_timestamps {
            get {
                return ResourceManager.GetString("config.Main.Advanced.timestamps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Login=Email or Name. Use &quot;-&quot; as password for offline mode. Leave blank to prompt user on startup..
        /// </summary>
        internal static string config_Main_General_account {
            get {
                return ResourceManager.GetString("config.Main.General.account", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The address of the game server, &quot;Host&quot; can be filled in with domain name or IP address. (The &quot;Port&quot; field can be deleted, it will be resolved automatically).
        /// </summary>
        internal static string config_Main_General_login {
            get {
                return ResourceManager.GetString("config.Main.General.login", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Microsoft Account sign-in method: &quot;mcc&quot; OR &quot;browser&quot;. If the login always fails, please try to use the &quot;browser&quot; once..
        /// </summary>
        internal static string config_Main_General_method {
            get {
                return ResourceManager.GetString("config.Main.General.method", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Account type: &quot;mojang&quot; OR &quot;microsoft&quot;. Also affects interactive login in console..
        /// </summary>
        internal static string config_Main_General_server_info {
            get {
                return ResourceManager.GetString("config.Main.General.server_info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Settings below are sent to the server and only affect server-side things like your skin..
        /// </summary>
        internal static string config_MCSettings {
            get {
                return ResourceManager.GetString("config.MCSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allows disabling chat colors server-side..
        /// </summary>
        internal static string config_MCSettings_ChatColors {
            get {
                return ResourceManager.GetString("config.MCSettings.ChatColors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &quot;enabled&quot;, &quot;commands&quot;, or &quot;disabled&quot;. Allows to mute yourself....
        /// </summary>
        internal static string config_MCSettings_ChatMode {
            get {
                return ResourceManager.GetString("config.MCSettings.ChatMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MC 1.7- difficulty. &quot;peaceful&quot;, &quot;easy&quot;, &quot;normal&quot;, &quot;difficult&quot;..
        /// </summary>
        internal static string config_MCSettings_Difficulty {
            get {
                return ResourceManager.GetString("config.MCSettings.Difficulty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If disabled, settings below are not sent to the server..
        /// </summary>
        internal static string config_MCSettings_Enabled {
            get {
                return ResourceManager.GetString("config.MCSettings.Enabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use any language implemented in Minecraft..
        /// </summary>
        internal static string config_MCSettings_Locale {
            get {
                return ResourceManager.GetString("config.MCSettings.Locale", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MC 1.9+ main hand. &quot;left&quot; or &quot;right&quot;..
        /// </summary>
        internal static string config_MCSettings_MainHand {
            get {
                return ResourceManager.GetString("config.MCSettings.MainHand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value range: [0 - 255]..
        /// </summary>
        internal static string config_MCSettings_RenderDistance {
            get {
                return ResourceManager.GetString("config.MCSettings.RenderDistance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connect to a server via a proxy instead of connecting directly
        ///If Mojang session services are blocked on your network, set Enabled_Login=true to login using proxy.
        ///If the connection to the Minecraft game server is blocked by the firewall, set Enabled_Ingame=true to use a proxy to connect to the game server.
        ////!\ Make sure your server rules allow Proxies or VPNs before setting enabled=true, or you may face consequences!.
        /// </summary>
        internal static string config_Proxy {
            get {
                return ResourceManager.GetString("config.Proxy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to connect to the game server through a proxy..
        /// </summary>
        internal static string config_Proxy_Enabled_Ingame {
            get {
                return ResourceManager.GetString("config.Proxy.Enabled_Ingame", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to connect to the login server through a proxy..
        /// </summary>
        internal static string config_Proxy_Enabled_Login {
            get {
                return ResourceManager.GetString("config.Proxy.Enabled_Login", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only required for password-protected proxies..
        /// </summary>
        internal static string config_Proxy_Password {
            get {
                return ResourceManager.GetString("config.Proxy.Password", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Supported types: &quot;HTTP&quot;, &quot;SOCKS4&quot;, &quot;SOCKS4a&quot;, &quot;SOCKS5&quot;..
        /// </summary>
        internal static string config_Proxy_Proxy_Type {
            get {
                return ResourceManager.GetString("config.Proxy.Proxy_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Proxy server must allow HTTPS for login, and non-443 ports for playing..
        /// </summary>
        internal static string config_Proxy_Server {
            get {
                return ResourceManager.GetString("config.Proxy.Server", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only required for password-protected proxies..
        /// </summary>
        internal static string config_Proxy_Username {
            get {
                return ResourceManager.GetString("config.Proxy.Username", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §aThe current setting is saved as {0}.
        /// </summary>
        internal static string config_saving {
            get {
                return ResourceManager.GetString("config.saving", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Chat signature related settings (affects minecraft 1.19+).
        /// </summary>
        internal static string config_Signature {
            get {
                return ResourceManager.GetString("config.Signature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Microsoft accounts only. If disabled, will not be able to sign chat and join servers configured with &quot;enforce-secure-profile=true&quot;.
        /// </summary>
        internal static string config_Signature_LoginWithSecureProfile {
            get {
                return ResourceManager.GetString("config.Signature.LoginWithSecureProfile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use red    color block to mark chat without legitimate signature.
        /// </summary>
        internal static string config_Signature_MarkIllegallySignedMsg {
            get {
                return ResourceManager.GetString("config.Signature.MarkIllegallySignedMsg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use green  color block to mark chat with legitimate signatures.
        /// </summary>
        internal static string config_Signature_MarkLegallySignedMsg {
            get {
                return ResourceManager.GetString("config.Signature.MarkLegallySignedMsg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use yellow color block to mark chat that have been modified by the server..
        /// </summary>
        internal static string config_Signature_MarkModifiedMsg {
            get {
                return ResourceManager.GetString("config.Signature.MarkModifiedMsg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use gray   color block to mark system message (always without signature).
        /// </summary>
        internal static string config_Signature_MarkSystemMessage {
            get {
                return ResourceManager.GetString("config.Signature.MarkSystemMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to display chat and messages in commands without legal signatures.
        /// </summary>
        internal static string config_Signature_ShowIllegalSignedChat {
            get {
                return ResourceManager.GetString("config.Signature.ShowIllegalSignedChat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set to true to display messages modified by the server, false to display the original signed messages.
        /// </summary>
        internal static string config_Signature_ShowModifiedChat {
            get {
                return ResourceManager.GetString("config.Signature.ShowModifiedChat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to sign the chat send from MCC.
        /// </summary>
        internal static string config_Signature_SignChat {
            get {
                return ResourceManager.GetString("config.Signature.SignChat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to sign the messages contained in the commands sent by MCC. For example, the message in &quot;/msg&quot; and &quot;/me&quot;.
        /// </summary>
        internal static string config_Signature_SignMessageInCommand {
            get {
                return ResourceManager.GetString("config.Signature.SignMessageInCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §cFailed to write to settings file {0}§r.
        /// </summary>
        internal static string config_write_fail {
            get {
                return ResourceManager.GetString("config.write.fail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Color test: Your terminal should display {0}.
        /// </summary>
        internal static string debug_color_test {
            get {
                return ResourceManager.GetString("debug.color_test", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Crypto keys &amp; hash generated..
        /// </summary>
        internal static string debug_crypto {
            get {
                return ResourceManager.GetString("debug.crypto", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8No profile keys could be loaded from disk.
        /// </summary>
        internal static string debug_keys_cache_fail {
            get {
                return ResourceManager.GetString("debug.keys_cache_fail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Profile keys has been successfully loaded from disk..
        /// </summary>
        internal static string debug_keys_cache_ok {
            get {
                return ResourceManager.GetString("debug.keys_cache_ok", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Performing request to {0}.
        /// </summary>
        internal static string debug_request {
            get {
                return ResourceManager.GetString("debug.request", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8No sessions could be loaded from disk.
        /// </summary>
        internal static string debug_session_cache_fail {
            get {
                return ResourceManager.GetString("debug.session_cache_fail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Session data has been successfully loaded from disk..
        /// </summary>
        internal static string debug_session_cache_ok {
            get {
                return ResourceManager.GetString("debug.session_cache_ok", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Success. (session ID: {0}).
        /// </summary>
        internal static string debug_session_id {
            get {
                return ResourceManager.GetString("debug.session_id", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bottom slot.
        /// </summary>
        internal static string Enchantment_bottom_slot {
            get {
                return ResourceManager.GetString("Enchantment.bottom_slot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enchantments available.
        /// </summary>
        internal static string Enchantment_enchantments_available {
            get {
                return ResourceManager.GetString("Enchantment.enchantments_available", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Levels.
        /// </summary>
        internal static string Enchantment_levels {
            get {
                return ResourceManager.GetString("Enchantment.levels", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Middle slot.
        /// </summary>
        internal static string Enchantment_middle_slot {
            get {
                return ResourceManager.GetString("Enchantment.middle_slot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Top slot.
        /// </summary>
        internal static string Enchantment_tops_slot {
            get {
                return ResourceManager.GetString("Enchantment.tops_slot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Got error code from server while refreshing authentication: {0}.
        /// </summary>
        internal static string error_auth {
            get {
                return ResourceManager.GetString("error.auth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to connect to this IP..
        /// </summary>
        internal static string error_connect {
            get {
                return ResourceManager.GetString("error.connect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8A timeout occured while attempting to connect to this IP..
        /// </summary>
        internal static string error_connection_timeout {
            get {
                return ResourceManager.GetString("error.connection_timeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to determine server version..
        /// </summary>
        internal static string error_determine {
            get {
                return ResourceManager.GetString("error.determine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Forge Login Handshake did not complete successfully.
        /// </summary>
        internal static string error_forge {
            get {
                return ResourceManager.GetString("error.forge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Forge StartEncryption Handshake did not complete successfully.
        /// </summary>
        internal static string error_forge_encrypt {
            get {
                return ResourceManager.GetString("error.forge_encrypt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot force Forge support for this Minecraft version!.
        /// </summary>
        internal static string error_forgeforce {
            get {
                return ResourceManager.GetString("error.forgeforce", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid usage of the generator command!.
        /// </summary>
        internal static string error_generator_invalid {
            get {
                return ResourceManager.GetString("error.generator.invalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided path must be a path to a file that is in .json format!.
        /// </summary>
        internal static string error_generator_json {
            get {
                return ResourceManager.GetString("error.generator.json", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid data path provided! (The path either does not exists or you have made a typo).
        /// </summary>
        internal static string error_generator_path {
            get {
                return ResourceManager.GetString("error.generator.path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Got error code from server: {0}.
        /// </summary>
        internal static string error_http_code {
            get {
                return ResourceManager.GetString("error.http_code", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Invalid response to StartEncryption packet.
        /// </summary>
        internal static string error_invalid_encrypt {
            get {
                return ResourceManager.GetString("error.invalid_encrypt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Invalid response to Handshake packet.
        /// </summary>
        internal static string error_invalid_response {
            get {
                return ResourceManager.GetString("error.invalid_response", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This feature requires Inventory Handling to be enabled in order to work!.
        /// </summary>
        internal static string error_inventoryhandling_not_enabled {
            get {
                return ResourceManager.GetString("error.inventoryhandling_not_enabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occured when attempting to join this server..
        /// </summary>
        internal static string error_join {
            get {
                return ResourceManager.GetString("error.join", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Login failed : .
        /// </summary>
        internal static string error_login {
            get {
                return ResourceManager.GetString("error.login", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Incorrect username/password, blacklisted IP or too many logins..
        /// </summary>
        internal static string error_login_blocked {
            get {
                return ResourceManager.GetString("error.login.blocked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User cancelled..
        /// </summary>
        internal static string error_login_cancel {
            get {
                return ResourceManager.GetString("error.login.cancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to login to this server..
        /// </summary>
        internal static string error_login_failed {
            get {
                return ResourceManager.GetString("error.login_failed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Account migrated, use e-mail as username..
        /// </summary>
        internal static string error_login_migrated {
            get {
                return ResourceManager.GetString("error.login.migrated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Network error..
        /// </summary>
        internal static string error_login_network {
            get {
                return ResourceManager.GetString("error.login.network", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User not premium..
        /// </summary>
        internal static string error_login_premium {
            get {
                return ResourceManager.GetString("error.login.premium", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid server response..
        /// </summary>
        internal static string error_login_response {
            get {
                return ResourceManager.GetString("error.login.response", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Login servers are unavailable. Please try again later..
        /// </summary>
        internal static string error_login_server {
            get {
                return ResourceManager.GetString("error.login.server", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SSL Error..
        /// </summary>
        internal static string error_login_ssl {
            get {
                return ResourceManager.GetString("error.login.ssl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown Error..
        /// </summary>
        internal static string error_login_unknown {
            get {
                return ResourceManager.GetString("error.login.unknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You are missing argument {0}.
        /// </summary>
        internal static string error_missing_argument {
            get {
                return ResourceManager.GetString("error.missing.argument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Server does not report its protocol version, autodetection will not work..
        /// </summary>
        internal static string error_no_version_report {
            get {
                return ResourceManager.GetString("error.no_version_report", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to ping this IP..
        /// </summary>
        internal static string error_ping {
            get {
                return ResourceManager.GetString("error.ping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This Realms world does not exist or access was denied.
        /// </summary>
        internal static string error_realms_access_denied {
            get {
                return ResourceManager.GetString("error.realms.access_denied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trying to join a Realms world but Realms support is disabled in config.
        /// </summary>
        internal static string error_realms_disabled {
            get {
                return ResourceManager.GetString("error.realms.disabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot retrieve the server IP of your Realms world.
        /// </summary>
        internal static string error_realms_ip_error {
            get {
                return ResourceManager.GetString("error.realms.ip_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid or unknown Realms server ID..
        /// </summary>
        internal static string error_realms_server_id {
            get {
                return ResourceManager.GetString("error.realms.server_id", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Realms server may require some time to start up. Please retry again later..
        /// </summary>
        internal static string error_realms_server_unavailable {
            get {
                return ResourceManager.GetString("error.realms.server_unavailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}: Invalid syntax, expecting --argname=value or --section.argname=value.
        /// </summary>
        internal static string error_setting_argument_syntax {
            get {
                return ResourceManager.GetString("error.setting.argument_syntax", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This feature requires Terrain And Movements to be enabled in order to work!.
        /// </summary>
        internal static string error_terrain_not_enabled {
            get {
                return ResourceManager.GetString("error.terrain_not_enabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connection Timeout.
        /// </summary>
        internal static string error_timeout {
            get {
                return ResourceManager.GetString("error.timeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Unexpected response from the server (is that a Minecraft server?).
        /// </summary>
        internal static string error_unexpect_response {
            get {
                return ResourceManager.GetString("error.unexpect_response", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot connect to the server : This version is not supported !.
        /// </summary>
        internal static string error_unsupported {
            get {
                return ResourceManager.GetString("error.unsupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage:.
        /// </summary>
        internal static string error_usage {
            get {
                return ResourceManager.GetString("error.usage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Server reports a different version than manually set. Login may not work..
        /// </summary>
        internal static string error_version_different {
            get {
                return ResourceManager.GetString("error.version_different", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ChatBot methods should NOT be called in the constructor as API handler is not initialized yet. Override Initialize() or AfterGameJoined() instead to perform initialization tasks..
        /// </summary>
        internal static string exception_chatbot_init {
            get {
                return ResourceManager.GetString("exception.chatbot.init", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided script does not have a valid MCCScript header.
        /// </summary>
        internal static string exception_csrunner_invalid_head {
            get {
                return ResourceManager.GetString("exception.csrunner.invalid_head", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to process incoming packet of type {0}. (PacketID: {1}, Protocol: {2}, LoginPhase: {3}, InnerException: {4})..
        /// </summary>
        internal static string exception_packet_process {
            get {
                return ResourceManager.GetString("exception.packet_process", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please update block types handling for this Minecraft version. See Material.cs.
        /// </summary>
        internal static string exception_palette_block {
            get {
                return ResourceManager.GetString("exception.palette.block", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please update entity types handling for this Minecraft version. See EntityType.cs.
        /// </summary>
        internal static string exception_palette_entity {
            get {
                return ResourceManager.GetString("exception.palette.entity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please update health field handling for this Minecraft version..
        /// </summary>
        internal static string exception_palette_healthfield {
            get {
                return ResourceManager.GetString("exception.palette.healthfield", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please update item types handling for this Minecraft version. See ItemType.cs.
        /// </summary>
        internal static string exception_palette_item {
            get {
                return ResourceManager.GetString("exception.palette.item", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please update packet type palette for this Minecraft version. See PacketTypePalette.cs.
        /// </summary>
        internal static string exception_palette_packet {
            get {
                return ResourceManager.GetString("exception.palette.packet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown direction.
        /// </summary>
        internal static string exception_unknown_direction {
            get {
                return ResourceManager.GetString("exception.unknown_direction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User-initiated logout should be done by calling Disconnect().
        /// </summary>
        internal static string exception_user_logout {
            get {
                return ResourceManager.GetString("exception.user_logout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The protocol version no.{0} is not supported..
        /// </summary>
        internal static string exception_version_unsupport {
            get {
                return ResourceManager.GetString("exception.version_unsupport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §cEntities are currently not handled for that MC version..
        /// </summary>
        internal static string extra_entity_disabled {
            get {
                return ResourceManager.GetString("extra.entity_disabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please enable EntityHandling in the config file first..
        /// </summary>
        internal static string extra_entity_required {
            get {
                return ResourceManager.GetString("extra.entity_required", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inventory # {0} closed..
        /// </summary>
        internal static string extra_inventory_close {
            get {
                return ResourceManager.GetString("extra.inventory_close", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §cInventories are currently not handled for that MC version..
        /// </summary>
        internal static string extra_inventory_disabled {
            get {
                return ResourceManager.GetString("extra.inventory_disabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inventory handling is now enabled..
        /// </summary>
        internal static string extra_inventory_enabled {
            get {
                return ResourceManager.GetString("extra.inventory_enabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use /inventory to interact with it..
        /// </summary>
        internal static string extra_inventory_interact {
            get {
                return ResourceManager.GetString("extra.inventory_interact", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inventory # {0} opened: {1}.
        /// </summary>
        internal static string extra_inventory_open {
            get {
                return ResourceManager.GetString("extra.inventory_open", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please enable InventoryHandling in the config file first..
        /// </summary>
        internal static string extra_inventory_required {
            get {
                return ResourceManager.GetString("extra.inventory_required", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §cTerrain &amp; Movements currently not handled for that MC version..
        /// </summary>
        internal static string extra_terrainandmovement_disabled {
            get {
                return ResourceManager.GetString("extra.terrainandmovement_disabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Terrain and Movements is now enabled..
        /// </summary>
        internal static string extra_terrainandmovement_enabled {
            get {
                return ResourceManager.GetString("extra.terrainandmovement_enabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please enable Terrain and Movements in the config file first..
        /// </summary>
        internal static string extra_terrainandmovement_required {
            get {
                return ResourceManager.GetString("extra.terrainandmovement_required", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8[{0}] Failed to initialize FileSystemWatcher, retrying using Polling.
        /// </summary>
        internal static string filemonitor_fail {
            get {
                return ResourceManager.GetString("filemonitor.fail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8[{0}] Initializing FileSystemWatcher for file: {1}.
        /// </summary>
        internal static string filemonitor_init {
            get {
                return ResourceManager.GetString("filemonitor.init", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Accepting server mod list....
        /// </summary>
        internal static string forge_accept {
            get {
                return ResourceManager.GetString("forge.accept", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Accepting server registries....
        /// </summary>
        internal static string forge_accept_registry {
            get {
                return ResourceManager.GetString("forge.accept_registry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Forge server connection complete!.
        /// </summary>
        internal static string forge_complete {
            get {
                return ResourceManager.GetString("forge.complete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Acknowledging FML2 Server Config: {0}.
        /// </summary>
        internal static string forge_fml2_config {
            get {
                return ResourceManager.GetString("forge.fml2.config", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Received FML2 Server Mod List.
        /// </summary>
        internal static string forge_fml2_mod {
            get {
                return ResourceManager.GetString("forge.fml2.mod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Sending back FML2 Client Mod List.
        /// </summary>
        internal static string forge_fml2_mod_send {
            get {
                return ResourceManager.GetString("forge.fml2.mod_send", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Acknowledging FML2 Server Registry: {0}.
        /// </summary>
        internal static string forge_fml2_registry {
            get {
                return ResourceManager.GetString("forge.fml2.registry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Got Unknown FML2 Handshake message no. {0}.
        /// </summary>
        internal static string forge_fml2_unknown {
            get {
                return ResourceManager.GetString("forge.fml2.unknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Ignoring Unknown FML2 LoginMessage channel: {0}.
        /// </summary>
        internal static string forge_fml2_unknown_channel {
            get {
                return ResourceManager.GetString("forge.fml2.unknown_channel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Mod list:.
        /// </summary>
        internal static string forge_mod_list {
            get {
                return ResourceManager.GetString("forge.mod_list", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Server is running Forge without mods..
        /// </summary>
        internal static string forge_no_mod {
            get {
                return ResourceManager.GetString("forge.no_mod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Received registry with {0} entries.
        /// </summary>
        internal static string forge_registry {
            get {
                return ResourceManager.GetString("forge.registry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Received registry {0} with {1} entries.
        /// </summary>
        internal static string forge_registry_2 {
            get {
                return ResourceManager.GetString("forge.registry_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Sending falsified mod list to server....
        /// </summary>
        internal static string forge_send_mod {
            get {
                return ResourceManager.GetString("forge.send_mod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Forge protocol version : {0}.
        /// </summary>
        internal static string forge_version {
            get {
                return ResourceManager.GetString("forge.version", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Server is running Forge with {0} mods..
        /// </summary>
        internal static string forge_with_mod {
            get {
                return ResourceManager.GetString("forge.with_mod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Available commands: {0}.
        /// </summary>
        internal static string general_available_cmd {
            get {
                return ResourceManager.GetString("general.available_cmd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This bot will be unloaded..
        /// </summary>
        internal static string general_bot_unload {
            get {
                return ResourceManager.GetString("general.bot_unload", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Done.
        /// </summary>
        internal static string general_done {
            get {
                return ResourceManager.GetString("general.done", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fail.
        /// </summary>
        internal static string general_fail {
            get {
                return ResourceManager.GetString("general.fail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OnInternalCommand: Got error from {0}: {1}.
        /// </summary>
        internal static string icmd_error {
            get {
                return ResourceManager.GetString("icmd.error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to help &lt;cmdname&gt;: show brief help about a command..
        /// </summary>
        internal static string icmd_help {
            get {
                return ResourceManager.GetString("icmd.help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to help &lt;cmdname&gt;. Available commands: {0}. For server help, use &apos;{1}send /help&apos; instead..
        /// </summary>
        internal static string icmd_list {
            get {
                return ResourceManager.GetString("icmd.list", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown command &apos;{0}&apos;. Use &apos;help&apos; for command list..
        /// </summary>
        internal static string icmd_unknown {
            get {
                return ResourceManager.GetString("icmd.unknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The old MinecraftClient.ini has been backed up as {0}.
        /// </summary>
        internal static string mcc_backup_old_config {
            get {
                return ResourceManager.GetString("mcc.backup_old_config", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Paste your code here:.
        /// </summary>
        internal static string mcc_browser_login_code {
            get {
                return ResourceManager.GetString("mcc.browser_login_code", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your browser should open automatically. If not, open the link below in your browser..
        /// </summary>
        internal static string mcc_browser_open {
            get {
                return ResourceManager.GetString("mcc.browser_open", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connecting to {0}....
        /// </summary>
        internal static string mcc_connecting {
            get {
                return ResourceManager.GetString("mcc.connecting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Login failed :.
        /// </summary>
        internal static string mcc_disconnect_login {
            get {
                return ResourceManager.GetString("mcc.disconnect.login", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connection has been lost..
        /// </summary>
        internal static string mcc_disconnect_lost {
            get {
                return ResourceManager.GetString("mcc.disconnect.lost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disconnected by Server :.
        /// </summary>
        internal static string mcc_disconnect_server {
            get {
                return ResourceManager.GetString("mcc.disconnect.server", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not connected to any server. Use &apos;{0}help&apos; for help..
        /// </summary>
        internal static string mcc_disconnected {
            get {
                return ResourceManager.GetString("mcc.disconnected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fetching profile key from Microsoft..
        /// </summary>
        internal static string mcc_fetching_key {
            get {
                return ResourceManager.GetString("mcc.fetching_key", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checking if server is running Forge....
        /// </summary>
        internal static string mcc_forge {
            get {
                return ResourceManager.GetString("mcc.forge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Force-enabling Forge support..
        /// </summary>
        internal static string mcc_forgeforce {
            get {
                return ResourceManager.GetString("mcc.forgeforce", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Found server {0}:{1} for domain {2}.
        /// </summary>
        internal static string mcc_found {
            get {
                return ResourceManager.GetString("mcc.found", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New configuration file &quot;{0}&quot; is generated..
        /// </summary>
        internal static string mcc_gen_new_config {
            get {
                return ResourceManager.GetString("mcc.gen_new_config", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Succesfully generated {0} palette using the dataset: {1}.
        /// </summary>
        internal static string mcc_generator_done {
            get {
                return ResourceManager.GetString("mcc.generator.done", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generating {0} palette using the dataset: {1}.
        /// </summary>
        internal static string mcc_generator_generating {
            get {
                return ResourceManager.GetString("mcc.generator.generating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Handshake successful. (Server ID: {0}).
        /// </summary>
        internal static string mcc_handshake {
            get {
                return ResourceManager.GetString("mcc.handshake", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §eNew version of MCC available: {0}.
        /// </summary>
        internal static string mcc_has_update {
            get {
                return ResourceManager.GetString("mcc.has_update", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Help us translate MCC: {0}.
        /// </summary>
        internal static string mcc_help_us_translate {
            get {
                return ResourceManager.GetString("mcc.help_us_translate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to parse the settings file, enter &quot;{0}new&quot; to generate a new configuration..
        /// </summary>
        internal static string mcc_invaild_config {
            get {
                return ResourceManager.GetString("mcc.invaild_config", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server IP : .
        /// </summary>
        internal static string mcc_ip {
            get {
                return ResourceManager.GetString("mcc.ip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server was successfully joined.
        ///Type &apos;{0}quit&apos; to leave the server..
        /// </summary>
        internal static string mcc_joined {
            get {
                return ResourceManager.GetString("mcc.joined", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Link: {0}.
        /// </summary>
        internal static string mcc_link {
            get {
                return ResourceManager.GetString("mcc.link", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Login :.
        /// </summary>
        internal static string mcc_login {
            get {
                return ResourceManager.GetString("mcc.login", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please type the username or email of your choice..
        /// </summary>
        internal static string mcc_login_basic_io {
            get {
                return ResourceManager.GetString("mcc.login_basic_io", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Failed to perform SRV lookup for {0}
        ///{1}: {2}.
        /// </summary>
        internal static string mcc_not_found {
            get {
                return ResourceManager.GetString("mcc.not_found", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8You chose to run in offline mode..
        /// </summary>
        internal static string mcc_offline {
            get {
                return ResourceManager.GetString("mcc.offline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Password: .
        /// </summary>
        internal static string mcc_password {
            get {
                return ResourceManager.GetString("mcc.password", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please type the password for {0}..
        /// </summary>
        internal static string mcc_password_basic_io {
            get {
                return ResourceManager.GetString("mcc.password_basic_io", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Password(invisible): {0}.
        /// </summary>
        internal static string mcc_password_hidden {
            get {
                return ResourceManager.GetString("mcc.password_hidden", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You are dead. Type &apos;{0}respawn&apos; to respawn..
        /// </summary>
        internal static string mcc_player_dead {
            get {
                return ResourceManager.GetString("mcc.player_dead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You are dead. Automatically respawning after 1 second..
        /// </summary>
        internal static string mcc_player_dead_respawn {
            get {
                return ResourceManager.GetString("mcc.player_dead_respawn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Or press Enter to exit Minecraft Console Client..
        /// </summary>
        internal static string mcc_press_exit {
            get {
                return ResourceManager.GetString("mcc.press_exit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Cached profile key needs to be refreshed..
        /// </summary>
        internal static string mcc_profile_key_invalid {
            get {
                return ResourceManager.GetString("mcc.profile_key_invalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Cached profile key is still valid for {0}..
        /// </summary>
        internal static string mcc_profile_key_valid {
            get {
                return ResourceManager.GetString("mcc.profile_key_valid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have access to the following Realms worlds.
        /// </summary>
        internal static string mcc_realms_available {
            get {
                return ResourceManager.GetString("mcc.realms_available", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use realms:&lt;index&gt; as server IP to join a Realms world.
        /// </summary>
        internal static string mcc_realms_join {
            get {
                return ResourceManager.GetString("mcc.realms_join", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Waiting 5 seconds ({0} attempts left)....
        /// </summary>
        internal static string mcc_reconnect {
            get {
                return ResourceManager.GetString("mcc.reconnect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resolving {0}....
        /// </summary>
        internal static string mcc_resolve {
            get {
                return ResourceManager.GetString("mcc.resolve", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restarting Minecraft Console Client....
        /// </summary>
        internal static string mcc_restart {
            get {
                return ResourceManager.GetString("mcc.restart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Waiting {0} seconds before restarting....
        /// </summary>
        internal static string mcc_restart_delay {
            get {
                return ResourceManager.GetString("mcc.restart_delay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Retrieving Server Info....
        /// </summary>
        internal static string mcc_retrieve {
            get {
                return ResourceManager.GetString("mcc.retrieve", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///MCC is running with default settings..
        /// </summary>
        internal static string mcc_run_with_default_settings {
            get {
                return ResourceManager.GetString("mcc.run_with_default_settings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Server is in offline mode..
        /// </summary>
        internal static string mcc_server_offline {
            get {
                return ResourceManager.GetString("mcc.server_offline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Server version : {0} (protocol v{1}).
        /// </summary>
        internal static string mcc_server_protocol {
            get {
                return ResourceManager.GetString("mcc.server_protocol", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server version : .
        /// </summary>
        internal static string mcc_server_version {
            get {
                return ResourceManager.GetString("mcc.server_version", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checking Session....
        /// </summary>
        internal static string mcc_session {
            get {
                return ResourceManager.GetString("mcc.session", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to check session..
        /// </summary>
        internal static string mcc_session_fail {
            get {
                return ResourceManager.GetString("mcc.session_fail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Cached session is invalid or expired..
        /// </summary>
        internal static string mcc_session_invalid {
            get {
                return ResourceManager.GetString("mcc.session_invalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Cached session is still valid for {0}..
        /// </summary>
        internal static string mcc_session_valid {
            get {
                return ResourceManager.GetString("mcc.session_valid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §cSettings file MinecraftClient.ini has been generated..
        /// </summary>
        internal static string mcc_settings_generated {
            get {
                return ResourceManager.GetString("mcc.settings_generated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §7Command §8 {0} §7 sent..
        /// </summary>
        internal static string mcc_single_cmd {
            get {
                return ResourceManager.GetString("mcc.single_cmd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Unknown or not supported MC version {0}.
        ///Switching to autodetection mode..
        /// </summary>
        internal static string mcc_unknown_version {
            get {
                return ResourceManager.GetString("mcc.unknown_version", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please use the newly generated MinecraftClient.ini.
        /// </summary>
        internal static string mcc_use_new_config {
            get {
                return ResourceManager.GetString("mcc.use_new_config", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Using Minecraft version {0} (protocol v{1}).
        /// </summary>
        internal static string mcc_use_version {
            get {
                return ResourceManager.GetString("mcc.use_version", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Version is supported.
        ///Logging in....
        /// </summary>
        internal static string mcc_version_supported {
            get {
                return ResourceManager.GetString("mcc.version_supported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to , with Forge.
        /// </summary>
        internal static string mcc_with_forge {
            get {
                return ResourceManager.GetString("mcc.with_forge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to §8Connected to proxy {0}:{1}.
        /// </summary>
        internal static string proxy_connected {
            get {
                return ResourceManager.GetString("proxy.connected", resourceCulture);
            }
        }
    }
}
