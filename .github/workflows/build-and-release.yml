# This workflow will build the project using .NET 6 then publish to GitHub releases
# target-version should be updated for future .NET releases

name: Build

on:
  push:
    branches: [ master ]

env:
  PROJECT: "MinecraftClient"
  target-version: "net6.0"
  project-path: ${{ github.workspace }}\${{ env.PROJECT }}
  win-out-path: ${{ project-path }}\bin\Release\${{ target-version }}\win-x64\publish\
  linux-out-path: ${{ project-path }}\bin\Release\${{ target-version }}\linux-x64\publish\

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v2.1.0
      with:
        dotnet-version: 6.0.0

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: 'true'

    - name: Get Version DateTime
      id: date-version
      uses: nanzm/get-time-action@v1.0
      with:
        timeZone: 0
        format: 'YYYY-MM-DD'

    - name: Get Version Info
      run: |
        # PowerShell commands
        set COMMIT "${{ github.sha }}".substring(0, 7)
        '' >> ${{ project-path }}\Properties\AssemblyInfo.cs
        "[assembly: AssemblyConfiguration(`"GitHub build ${{ github.run_number }}, built on ${{ steps.date-version.outputs.time }} from commit $COMMIT`")]" >> ${{ project-path }}\Properties\AssemblyInfo.cs

    - name: Build for Windows
      run: dotnet publish ${{ project-path }}.sln -f ${{ target-version }} -r win-x64 -c Release -p:PublishSingleFile=true -p:UseAppHost=true -p:IncludeNativeLibrariesForSelfExtract=true

    - name: Zip Windows Build
    - uses: montudor/action-zip@v1
      with:
        args: zip -qq -r windows.zip *
        working-directory: ${{ win-out-path }}\

    - name: Build for Linux
      run: dotnet publish ${{ project-path }}.sln -f ${{ target-version }} -r linux-x64 -c Release -p:PublishSingleFile=true -p:UseAppHost=true -p:IncludeNativeLibrariesForSelfExtract=true

    - name: Zip Linux Build
    - uses: montudor/action-zip@v1
      with:
        args: zip -qq -r linux.zip *
        working-directory: ${{ linux-out-path }}\

    - name: Get Release DateTime
      id: date-release
      uses: nanzm/get-time-action@v1.0
      with:
        timeZone: 0
        format: 'YYYYMMDD'

    - name: Windows Release
      uses: tix-factory/release-manager@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        mode: uploadReleaseAsset
        filePath: ${{ win-out-path }}\windows.zip
        assetName: ${{ PROJECT }}-windows.zip
        tag: ${{ format('{0}-{1}', steps.date-release.outputs.time, github.run_number) }}

    - name: Linux Release
      uses: tix-factory/release-manager@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        mode: uploadReleaseAsset
        filePath: ${{ linux-out-path }}\linux.zip
        assetName: ${{ PROJECT }}-linux.zip
        tag: ${{ format('{0}-{1}', steps.date-release.outputs.time, github.run_number) }}
